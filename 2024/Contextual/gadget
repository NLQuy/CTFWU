


Gadgets
=======


0x0000000000001283: adc al, 0x48; mov eax, dword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x000000000000971f: adc byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009764: adc byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098a5: adc byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098d9: adc byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000090fa: adc byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x1d73; 
0x00000000000090b2: adc byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x1d76; 
0x00000000000053a1: adc byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x00000000000054bc: adc byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000008b3f: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008b9d: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008bfb: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c59: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cb7: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d15: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000096dd: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009702: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009722: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009746: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009767: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000978c: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097af: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097d2: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097ed: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000980f: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009833: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009864: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009888: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098a8: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098dc: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009934: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000996b: adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009a73: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000009a72: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000009ada: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000009ad9: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000009bdb: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000009bda: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000014aa: adc byte ptr [rax], al; add byte ptr [rax], al; call 0x9a46; leave; ret; 
0x00000000000085b5: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000864f: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000008764: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000008940: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000089af: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000008a9e: adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000001242: adc eax, 0x96058b48; int 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000005db9: adc esi, dword ptr [rdi + rdi*8 + 0x1b8ff]; add byte ptr [rax], al; leave; ret; 
0x000000000000854d: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0; pop rbp; ret; 
0x0000000000005ac8: add al, ch; ret 0xffb6; 
0x00000000000057c8: add al, ch; ret 0xffb9; 
0x00000000000014ad: add al, ch; xchg ebx, eax; test dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000001312: add byte ptr [rax + 0x39], cl; clc; sete al; pop rbp; ret; 
0x0000000000001472: add byte ptr [rax + 0x39], cl; clc; sete al; pop rbp; ret; 
0x00000000000090fd: add byte ptr [rax + 0x39], cl; ret 0x1d73; 
0x00000000000090b5: add byte ptr [rax + 0x39], cl; ret 0x1d76; 
0x0000000000005364: add byte ptr [rax + 0x39], cl; ret 0x4477; 
0x00000000000053a4: add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x0000000000009b12: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000005479: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000000054bf: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000009b79: add byte ptr [rax + 0x39], cl; ret 0xf74; 
0x0000000000008b4a: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008ba8: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c06: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c64: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008cc2: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d20: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000913a: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000096b7: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000099a0: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000002887: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000003af3: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000000458c: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000004988: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005665: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005965: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005bf9: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000008e7d: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; je 0x8e55; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000092d7: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; je 0x92af; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009377: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; je 0x934f; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d6f: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008dc6: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008ed4: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f2b: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f82: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008fde: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000903a: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009199: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009200: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000093de: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009445: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000094ac: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009518: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009584: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000099f0: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000009e6d: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000007117: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000721c: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007324: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007437: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007d8b: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007ebb: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007fc0: add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000013e9: add byte ptr [rax - 0x77], cl; iretd; call 0x9aec; nop; leave; ret; 
0x00000000000014ec: add byte ptr [rax - 0x77], cl; iretd; call 0x9aec; nop; leave; ret; 
0x0000000000008e80: add byte ptr [rax - 0x77], cl; je 0x8e55; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000092da: add byte ptr [rax - 0x77], cl; je 0x92af; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000937a: add byte ptr [rax - 0x77], cl; je 0x934f; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d72: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008dc9: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008ed7: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f2e: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f85: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008fe1: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000903d: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000919c: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009203: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000093e1: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009448: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000094af: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000951b: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009587: add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000128a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000001249: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000001253: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000005ac6: add byte ptr [rax], al; add al, ch; ret 0xffb6; 
0x00000000000057c6: add byte ptr [rax], al; add al, ch; ret 0xffb9; 
0x00000000000014ab: add byte ptr [rax], al; add al, ch; xchg ebx, eax; test dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000009138: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000096b5: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000999e: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000007115: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000721a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007d89: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007eb9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000009e77: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000009ab9: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000009a3f: add byte ptr [rax], al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000009e79: add byte ptr [rax], al; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000099f9: add byte ptr [rax], al; add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000008552: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000001254: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000854e: add byte ptr [rax], al; add byte ptr [rax], bh; pop rbp; ret; 
0x0000000000009d55: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; and dword ptr [rdi + rdi*8 - 1], esi; leave; ret; 
0x0000000000005dbf: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000085dd: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008677: add byte ptr [rax], al; add cl, cl; ret; 
0x000000000000878c: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000087de: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008840: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008912: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008981: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008a00: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008aef: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000009982: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000009aba: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000012c0: add byte ptr [rax], al; call 0x1110; call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000009c45: add byte ptr [rax], al; call 0x1160; nop; leave; ret; 
0x00000000000014ac: add byte ptr [rax], al; call 0x9a46; leave; ret; 
0x000000000000a186: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x00000000000036f2: add byte ptr [rax], al; je 0x36fb; call 0x1180; leave; ret; 
0x00000000000052fe: add byte ptr [rax], al; je 0x5307; call 0x1180; leave; ret; 
0x000000000000852c: add byte ptr [rax], al; je 0x8535; call 0x1180; leave; ret; 
0x0000000000009d56: add byte ptr [rax], al; je 0x9d5f; call 0x1180; leave; ret; 
0x000000000000a17a: add byte ptr [rax], al; je 0xa183; call 0x1180; leave; ret; 
0x00000000000014b1: add byte ptr [rax], al; leave; ret; 
0x0000000000005dc0: add byte ptr [rax], al; leave; ret; 
0x00000000000085de: add byte ptr [rax], al; leave; ret; 
0x0000000000008678: add byte ptr [rax], al; leave; ret; 
0x000000000000878d: add byte ptr [rax], al; leave; ret; 
0x00000000000087df: add byte ptr [rax], al; leave; ret; 
0x0000000000008841: add byte ptr [rax], al; leave; ret; 
0x0000000000008913: add byte ptr [rax], al; leave; ret; 
0x0000000000008982: add byte ptr [rax], al; leave; ret; 
0x0000000000008a01: add byte ptr [rax], al; leave; ret; 
0x0000000000008af0: add byte ptr [rax], al; leave; ret; 
0x0000000000009983: add byte ptr [rax], al; leave; ret; 
0x0000000000009abb: add byte ptr [rax], al; leave; ret; 
0x000000000000854f: add byte ptr [rax], al; mov eax, 0; pop rbp; ret; 
0x0000000000008b49: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008ba7: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008c05: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008c63: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008cc1: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008d1f: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000009139: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x00000000000096b6: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x000000000000999f: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008e20: add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009072: add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000926a: add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095cf: add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009975: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000008d71: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc8: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed6: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f2d: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f84: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fe0: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000903c: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000919b: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009202: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093e0: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009447: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094ae: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000951a: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009586: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008e7f: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x00000000000092d9: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x0000000000009379: add byte ptr [rax], al; mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x00000000000099ef: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000009e6c: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009e6b: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009ed3: add byte ptr [rax], al; mov rdi, rax; call 0x9a00; nop; leave; ret; 
0x00000000000013e8: add byte ptr [rax], al; mov rdi, rcx; call 0x9aec; nop; leave; ret; 
0x00000000000014eb: add byte ptr [rax], al; mov rdi, rcx; call 0x9aec; nop; leave; ret; 
0x00000000000013f0: add byte ptr [rax], al; nop; leave; ret; 
0x00000000000014f3: add byte ptr [rax], al; nop; leave; ret; 
0x0000000000001716: add byte ptr [rax], al; nop; leave; ret; 
0x0000000000009a41: add byte ptr [rax], al; nop; leave; ret; 
0x0000000000009e7b: add byte ptr [rax], al; nop; leave; ret; 
0x00000000000099fb: add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000008554: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008b4e: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008bac: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008c0a: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008c68: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008cc6: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008d24: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008d7b: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008dd2: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008e2a: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008e89: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008ee0: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008f37: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008f8e: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008fea: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009046: add byte ptr [rax], al; pop rbp; ret; 
0x000000000000907c: add byte ptr [rax], al; pop rbp; ret; 
0x000000000000913e: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000091a5: add byte ptr [rax], al; pop rbp; ret; 
0x000000000000920c: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009274: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000092e3: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009383: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000093ea: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009451: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000094b8: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009524: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009590: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000095d9: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000096bb: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000099a4: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000001256: add byte ptr [rax], al; ret; 
0x0000000000001296: add byte ptr [rax], al; ret; 
0x000000000000100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000000100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000001248: add byte ptr [rax], al; test rax, rax; je 0x1258; jmp rax; 
0x0000000000001289: add byte ptr [rax], al; test rax, rax; je 0x1298; jmp rax; 
0x0000000000008550: add byte ptr [rax], bh; pop rbp; ret; 
0x0000000000001295: add byte ptr [rax], r8b; ret; 
0x0000000000009d57: add byte ptr [rbp + rax - 0x18], dh; and dword ptr [rdi + rdi*8 - 1], esi; leave; ret; 
0x0000000000009cec: add byte ptr [rbp - 0x76], dh; nop; leave; ret; 
0x000000000000999c: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000012d1: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000009fc8: add byte ptr [rdi], cl; mov dh, 0x40; or byte ptr [rax], bh; ret 0x4f74; 
0x000000000000854c: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax], bh; pop rbp; ret; 
0x000000000000136e: add cl, cl; ret; 
0x00000000000013bc: add cl, cl; ret; 
0x00000000000014b2: add cl, cl; ret; 
0x0000000000005dc1: add cl, cl; ret; 
0x00000000000085df: add cl, cl; ret; 
0x0000000000008679: add cl, cl; ret; 
0x000000000000878e: add cl, cl; ret; 
0x00000000000087e0: add cl, cl; ret; 
0x0000000000008842: add cl, cl; ret; 
0x0000000000008914: add cl, cl; ret; 
0x0000000000008983: add cl, cl; ret; 
0x0000000000008a02: add cl, cl; ret; 
0x0000000000008af1: add cl, cl; ret; 
0x0000000000009984: add cl, cl; ret; 
0x0000000000009abc: add cl, cl; ret; 
0x0000000000009c10: add dword ptr [rax - 0x75], ecx; clc; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000001630: add dword ptr [rax - 0x7d], ecx; jge 0x1615; pcmpeqd mm1, qword ptr [rax - 0x17ba74b8]; leave; ret; 
0x0000000000007322: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007435: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007fbe: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000009c43: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1160; nop; leave; ret; 
0x0000000000005dbe: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000000085dc: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000008676: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000000878b: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000000087dd: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000000883f: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000008911: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000008980: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000000089ff: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000008aee: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000009981: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000009137: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x00000000000096b4: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x000000000000999d: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008b4c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008baa: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008c08: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008c66: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008cc4: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008d22: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008d79: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008dd0: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008e28: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008e87: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008ede: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008f35: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008f8c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000008fe8: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009044: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000907a: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000913c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000091a3: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000920a: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009272: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000092e1: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009381: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000093e8: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000944f: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000094b6: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000009522: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000958e: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000095d7: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000096b9: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000099a2: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000162d: add dword ptr [rbp - 0x20], 1; cmp qword ptr [rbp - 0x20], 0xf; jbe 0x15c0; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000005508: add dword ptr [rbp - 0x28], 1; cmp qword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x0000000000009ed0: add eax, 0x6088; mov rdi, rax; call 0x9a00; nop; leave; ret; 
0x0000000000001286: add eax, 0xcd65; test rax, rax; je 0x1298; jmp rax; 
0x0000000000001245: add eax, 0xcd96; test rax, rax; je 0x1258; jmp rax; 
0x000000000000100a: add eax, 0xcfd9; test rax, rax; je 0x1016; call rax; 
0x000000000000a17d: add eax, 0xff6ffde8; dec ecx; ret; 
0x0000000000009d59: add eax, 0xff7421e8; dec ecx; ret; 
0x000000000000852f: add eax, 0xff8c4be8; dec ecx; ret; 
0x0000000000005301: add eax, 0xffbe79e8; dec ecx; ret; 
0x00000000000036f5: add eax, 0xffda85e8; dec ecx; ret; 
0x0000000000009ae8: add eax, edx; pop rbp; ret; 
0x00000000000016f3: add eax, esi; lea rcx, [rax + 8]; mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x0000000000004589: add ebp, dword ptr [rbx]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000008e1c: add ecx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906e: add ecx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009266: add ecx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095cb: add ecx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000024c4: add ecx, dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000002522: add ecx, dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000001794: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000017bd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000017e6: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001813: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001840: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000187b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000018bf: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000018e7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000190a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001934: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000195a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001980: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000019a9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000019e2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001a1d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001a61: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001aa8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001ae3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001b1b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001b41: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001b67: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001b90: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001bc9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001bef: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001c17: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001c44: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001c67: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001c95: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001cdc: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001d17: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001d4f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001d96: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001ddd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001e18: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001e5e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001e84: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001eac: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001ed2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001ef8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001f30: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001f5a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001fa7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000001fea: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002032: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000205f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000209a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000020de: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002106: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002129: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002153: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002179: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000219f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000021c8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000021f2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000222c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002256: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002290: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000022ba: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000022e4: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000231e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002354: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000237a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000023a4: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000023d1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000023fe: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002441: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002489: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000024e7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002545: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002588: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000025d0: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000025fd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000262d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000265a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002687: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000026ca: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002712: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000275f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002789: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000027b6: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002801: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000284e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002b8b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000002be8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003177: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000319f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000031c2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000031ec: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003212: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003238: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003261: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003293: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000032c1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000032ef: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000332a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000336e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003396: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000033b9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000033e3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003409: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000342f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003454: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000347f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000034a8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000034e1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003534: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003577: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000035ba: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003602: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000362f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000365d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000373d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003760: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003799: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000037de: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000381b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003864: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003897: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000038e2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000390d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000039f3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003a2f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003ac1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003b42: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003b93: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003bda: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003c1f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003c6b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003cbf: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003d06: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003d4d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003dc2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003e09: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003e50: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003ea1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003ef2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003f37: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003f7c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003fc8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000401c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004063: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000040a8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000411d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004164: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000041a9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000041fa: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000424b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004290: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000042d7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004323: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004377: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000043be: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004405: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000447a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000044c1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004508: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004559: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000046ae: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000046f5: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000473a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000478b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000047dc: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004823: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000486f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000048c2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004909: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004953: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004a2a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004d85: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004dcc: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004e13: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004e37: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004e80: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004ef8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004f3f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004f86: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000004fcd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005014: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005e10: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005e32: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005e59: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005e79: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005f22: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005f44: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005f6b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005f8b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005fab: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005fce: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000005fee: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000600e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006036: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000605c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006087: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000060ab: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000060cf: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000060f3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000611a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000061be: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000061e0: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006207: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006227: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006247: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000626b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006298: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000062be: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000062e4: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000630f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006333: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006357: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000637e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000063a2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000063c2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000063e6: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006481: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000064a3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000064ca: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000064ea: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000650a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000652d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000654d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000657a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000065a1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000065c7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000065f2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006616: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000663a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006684: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000066a8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000675f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006781: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000067a8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000067c8: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000067ec: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006814: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006841: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000068f5: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006917: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000693e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000695e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006982: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000069aa: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000069d7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006aa1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006ac3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006aea: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006b0a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006b2a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006b51: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006b75: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006c49: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006c6b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006c92: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006cb2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006cd6: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006cfa: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006d1e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006dbd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006ddf: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006e06: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006e26: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006e46: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006e69: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006e89: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006ea9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006ed1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006ef7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006f22: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006f46: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006f6a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006f8e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000006fb2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000753a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000755c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007583: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000075a3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000075c3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000075e6: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007615: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000763e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007660: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007687: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000076a7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000076c7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000076e7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007716: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007747: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000782c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000784e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007875: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007895: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000078b9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000078e2: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007904: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000792b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000794b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000796f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007997: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000079c3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000079e9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007a17: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007a7a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007a9c: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007ac3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007ae3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007b03: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007b26: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007b46: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007b6a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007b90: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007bbb: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007bdf: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007c03: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007c2a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000007c4e: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000080f1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008113: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000813a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000815a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000817a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000819d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000081c4: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000081ec: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008212: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000823d: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008261: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008285: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000082a9: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000082cd: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000082f1: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008315: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008357: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008379: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000083a0: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000083c0: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000083e0: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008403: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000842a: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008452: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008478: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000084a3: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000084c7: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000008504: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000009971: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000008d6d: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc4: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed2: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f29: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f80: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fdc: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009038: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009197: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091fe: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093dc: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009443: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094aa: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009516: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009582: add edx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000001017: add esp, 8; ret; 
0x000000000000a191: add esp, 8; ret; 
0x000000000000162c: add qword ptr [rbp - 0x20], 1; cmp qword ptr [rbp - 0x20], 0xf; jbe 0x15c0; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000005507: add qword ptr [rbp - 0x28], 1; cmp qword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x0000000000009ecf: add rax, 0x6088; mov rdi, rax; call 0x9a00; nop; leave; ret; 
0x0000000000009ae7: add rax, rdx; pop rbp; ret; 
0x00000000000016f2: add rax, rsi; lea rcx, [rax + 8]; mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x0000000000008e1b: add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906d: add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009265: add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095ca: add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009970: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000008d6c: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc3: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed1: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f28: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f7f: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fdb: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009037: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009196: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091fd: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093db: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009442: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094a9: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009515: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009581: add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000001016: add rsp, 8; ret; 
0x000000000000a190: add rsp, 8; ret; 
0x0000000000009e74: and byte ptr [rax + 0x60], 0; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000009fc4: and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x00000000000097ac: and byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097ea: and byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009861: and byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009931: and byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009808: and byte ptr [rax - 0x75], cl; ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009d5b: and dword ptr [rdi + rdi*8 - 1], esi; leave; ret; 
0x00000000000036ef: and eax, 0x28; je 0x36fb; call 0x1180; leave; ret; 
0x00000000000052fb: and eax, 0x28; je 0x5307; call 0x1180; leave; ret; 
0x0000000000008529: and eax, 0x28; je 0x8535; call 0x1180; leave; ret; 
0x0000000000009d53: and eax, 0x28; je 0x9d5f; call 0x1180; leave; ret; 
0x000000000000a177: and eax, 0x28; je 0xa183; call 0x1180; leave; ret; 
0x0000000000004985: and esp, dword ptr [rdi]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x00000000000012c2: call 0x1110; call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000001678: call 0x1120; nop; leave; ret; 
0x0000000000009c47: call 0x1160; nop; leave; ret; 
0x00000000000036f6: call 0x1180; leave; ret; 
0x0000000000005302: call 0x1180; leave; ret; 
0x0000000000008530: call 0x1180; leave; ret; 
0x0000000000009d5a: call 0x1180; leave; ret; 
0x000000000000a17e: call 0x1180; leave; ret; 
0x0000000000005db8: call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000085d6: call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008670: call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008785: call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d7: call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008839: call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000890b: call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000897a: call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f9: call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae8: call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000012c7: call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000003976: call 0x36fd; nop; leave; ret; 
0x00000000000016fc: call 0x48cea049; mov edi, eax; call rdx; 
0x00000000000016fb: call 0x48cea049; mov edi, eax; call rdx; 
0x0000000000009ae6: call 0x5dd09c33; ret; 
0x0000000000009ae5: call 0x5dd09c33; ret; 
0x0000000000009aad: call 0x84125fa; cmp qword ptr [rbp - 0x10], rax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000009aac: call 0x84125fa; cmp qword ptr [rbp - 0x10], rax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000009ed8: call 0x9a00; nop; leave; ret; 
0x00000000000014ae: call 0x9a46; leave; ret; 
0x00000000000013ed: call 0x9aec; nop; leave; ret; 
0x00000000000014f0: call 0x9aec; nop; leave; ret; 
0x000000000000a0d4: call 0x9c4f; nop; leave; ret; 
0x0000000000009ceb: call 0xffffffff908b11f0; leave; ret; 
0x000000000000170c: call 0xffffffffe055a259; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x000000000000170b: call 0xffffffffe055a259; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x0000000000001014: call rax; 
0x0000000000001014: call rax; add rsp, 8; ret; 
0x0000000000009a99: call rcx; 
0x0000000000001703: call rdx; 
0x0000000000008e1a: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008e19: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906c: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906b: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009264: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009263: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095c9: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095c8: clc; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d6b: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008d6a: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc2: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc1: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed0: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ecf: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f27: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f26: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f7e: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f7d: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fda: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fd9: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009036: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009035: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009195: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009194: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091fc: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091fb: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093da: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093d9: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009441: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009440: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094a8: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094a7: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009514: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009513: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009580: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000957f: clc; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000001240: clc; je 0x1258; mov rax, qword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x0000000000001449: clc; leave; ret; 
0x0000000000001448: clc; leave; ret; 
0x0000000000001442: clc; mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000001441: clc; mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000999a: clc; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009999: clc; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000854a: clc; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000008549: clc; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009a3a: clc; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x0000000000009a39: clc; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x00000000000099f4: clc; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x00000000000099f3: clc; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000008b43: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008b42: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008ba1: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008ba0: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008bff: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008bfe: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5d: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5c: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cbb: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cba: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d19: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d18: clc; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009e71: clc; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009e70: clc; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009c14: clc; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000009c13: clc; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000000136b: clc; mov rax, qword ptr [rax]; leave; ret; 
0x000000000000136a: clc; mov rax, qword ptr [rax]; leave; ret; 
0x00000000000013b9: clc; mov rax, qword ptr [rax]; leave; ret; 
0x00000000000013b8: clc; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000009a8e: clc; mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x0000000000009a8d: clc; mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x0000000000001674: clc; mov rdi, rax; call 0x1120; nop; leave; ret; 
0x0000000000001673: clc; mov rdi, rax; call 0x1120; nop; leave; ret; 
0x0000000000001316: clc; sete al; pop rbp; ret; 
0x0000000000001315: clc; sete al; pop rbp; ret; 
0x0000000000001476: clc; sete al; pop rbp; ret; 
0x0000000000001475: clc; sete al; pop rbp; ret; 
0x000000000000a18b: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001003: cli; sub rsp, 8; mov rax, qword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000009c34: cmp byte ptr [rbp - 1], dh; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000009ab3: cmp dword ptr [rbp - 0x10], eax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000009ce9: cmp dword ptr [rbp - 0x18], 0; jne 0x9c79; nop; leave; ret; 
0x0000000000003924: cmp dword ptr [rbp - 0x20], 0; jns 0x3728; nop; pop rbp; ret; 
0x0000000000001632: cmp dword ptr [rbp - 0x20], 0xf; jbe 0x15c0; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000000550d: cmp dword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x00000000000055fc: cmp dword ptr [rbp - 8], 0xf; jbe 0x55b0; nop; nop; leave; ret; 
0x0000000000001314: cmp dword ptr [rbp - 8], eax; sete al; pop rbp; ret; 
0x0000000000001474: cmp dword ptr [rbp - 8], eax; sete al; pop rbp; ret; 
0x00000000000012ce: cmp eax, 0x10000cd; pop rbp; ret; 
0x00000000000012bd: cmp eax, 0xcd46; call 0x1110; call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x000000000000123f: cmp eax, edi; je 0x1258; mov rax, qword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x0000000000009ab2: cmp qword ptr [rbp - 0x10], rax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000009ce8: cmp qword ptr [rbp - 0x18], 0; jne 0x9c79; nop; leave; ret; 
0x0000000000003923: cmp qword ptr [rbp - 0x20], 0; jns 0x3728; nop; pop rbp; ret; 
0x0000000000001631: cmp qword ptr [rbp - 0x20], 0xf; jbe 0x15c0; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000000550c: cmp qword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x00000000000055fb: cmp qword ptr [rbp - 8], 0xf; jbe 0x55b0; nop; nop; leave; ret; 
0x0000000000001313: cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x0000000000001473: cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x000000000000123e: cmp rax, rdi; je 0x1258; mov rax, qword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x0000000000002b55: dec dword ptr [rax + 0x39]; ret 0x1075; 
0x00000000000030dc: dec dword ptr [rax + 0x39]; ret 0x3575; 
0x0000000000002943: dec dword ptr [rax + 0x39]; ret 0x3773; 
0x000000000000307f: dec dword ptr [rax + 0x39]; ret 0x3773; 
0x0000000000003035: dec dword ptr [rax + 0x39]; ret 0x3776; 
0x00000000000030c9: dec dword ptr [rax + 0x39]; ret 0x4875; 
0x00000000000028d5: dec dword ptr [rax + 0x39]; ret 0x5173; 
0x0000000000002c75: dec dword ptr [rax + 0x39]; ret 0x5275; 
0x0000000000002d35: dec dword ptr [rax + 0x39]; ret 0x5275; 
0x0000000000002df5: dec dword ptr [rax + 0x39]; ret 0x5275; 
0x0000000000002ab8: dec dword ptr [rax + 0x39]; ret 0x5375; 
0x00000000000029f1: dec dword ptr [rax + 0x39]; ret 0x5475; 
0x0000000000002f89: dec dword ptr [rax + 0x39]; ret 0x6275; 
0x0000000000002c62: dec dword ptr [rax + 0x39]; ret 0x6575; 
0x0000000000002d22: dec dword ptr [rax + 0x39]; ret 0x6575; 
0x0000000000002de2: dec dword ptr [rax + 0x39]; ret 0x6575; 
0x00000000000029de: dec dword ptr [rax + 0x39]; ret 0x6775; 
0x0000000000002f76: dec dword ptr [rax + 0x39]; ret 0x7575; 
0x0000000000003159: dec dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000002ce5: dec dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000002d9a: dec dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000002a04: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002a1d: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002acb: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002ae4: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002a9b: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x00000000000019b3: dec dword ptr [rax + 1]; ret 0x6348; 
0x0000000000001b9a: dec dword ptr [rax + 1]; ret 0x6348; 
0x00000000000034b2: dec dword ptr [rax + 1]; ret 0x6348; 
0x0000000000001914: dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000002133: dec dword ptr [rax + 1]; ret 0x8b48; 
0x00000000000028cb: dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000002939: dec dword ptr [rax + 1]; ret 0x8b48; 
0x00000000000031cc: dec dword ptr [rax + 1]; ret 0x8b48; 
0x000000000000326b: dec dword ptr [rax + 1]; ret 0x8b48; 
0x00000000000033c3: dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000001c71: dec dword ptr [rax + 1]; ret 0xb60f; 
0x0000000000009a36: dec dword ptr [rax - 0x75]; clc; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x0000000000003a75: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000009c37: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000014a2: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x10be; 
0x0000000000001345: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x8be; 
0x0000000000005516: dec dword ptr [rdi]; mov dh, 0x45; xlatb; pop rbp; ret; 
0x00000000000036fa: dec ecx; ret; 
0x0000000000005306: dec ecx; ret; 
0x0000000000008534: dec ecx; ret; 
0x0000000000009d5e: dec ecx; ret; 
0x000000000000a182: dec ecx; ret; 
0x000000000000a188: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001000: endbr64; sub rsp, 8; mov rax, qword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000005509: fadd dword ptr [r9]; cmp qword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x000000000000550a: fadd dword ptr [rcx]; cmp qword ptr [rbp - 0x28], 0xf; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x000000000000a04e: fmul dword ptr [r2 + 0xfc08500]; test byte ptr [rbx - 0x6f000002], bl; leave; ret; 
0x0000000000009fc0: fmul dword ptr [r8 - 0x75]; and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x00000000000096e0: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009705: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009725: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009749: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000976a: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000978f: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097b2: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097d5: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097f0: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009812: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009836: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009867: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000988b: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098ab: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000098df: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009937: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000996e: fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009fc1: fmul dword ptr [rax - 0x75]; and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x0000000000009a8a: fmul dword ptr [rax - 0x75]; clc; mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x00000000000096e1: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009706: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009726: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000974a: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000976b: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009790: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000097b3: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000097d6: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000097f1: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009813: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009837: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009868: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000988c: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000098ac: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000098e0: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000009938: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000996f: fmul dword ptr [rax - 0x7f]; ret 0xc00; 
0x000000000000a04f: fmul dword ptr [rbx + 0xfc08500]; test byte ptr [rbx - 0x6f000002], bl; leave; ret; 
0x000000000000550f: fmul dword ptr [rdi]; jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x000000000000100b: fxch st(7); add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x0000000000009ae3: imul eax, dword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x0000000000009ae2: imul rax, qword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x0000000000001006: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0xcfd9; test rax, rax; je 0x1016; call rax; 
0x0000000000001288: int 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000001287: int 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000001247: int 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x00000000000012cf: int 0; add byte ptr [rcx], al; pop rbp; ret; 
0x000000000000100c: iretd; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x00000000000085d5: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000866f: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008784: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d6: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008838: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000890a: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008979: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f8: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae7: iretd; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000013ec: iretd; call 0x9aec; nop; leave; ret; 
0x00000000000014ef: iretd; call 0x9aec; nop; leave; ret; 
0x0000000000009ab6: jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000001636: jbe 0x15c0; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000005511: jbe 0x532a; movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x0000000000005600: jbe 0x55b0; nop; nop; leave; ret; 
0x0000000000001012: je 0x1016; call rax; 
0x0000000000001012: je 0x1016; call rax; add rsp, 8; ret; 
0x000000000000124d: je 0x1258; jmp rax; 
0x0000000000001241: je 0x1258; mov rax, qword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x000000000000128e: je 0x1298; jmp rax; 
0x0000000000001282: je 0x1298; mov rax, qword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x00000000000036f4: je 0x36fb; call 0x1180; leave; ret; 
0x0000000000005300: je 0x5307; call 0x1180; leave; ret; 
0x000000000000852e: je 0x8535; call 0x1180; leave; ret; 
0x0000000000008e83: je 0x8e55; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000092dd: je 0x92af; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000937d: je 0x934f; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009d5c: je 0x9d5d; dec ecx; ret; 
0x0000000000009d58: je 0x9d5f; call 0x1180; leave; ret; 
0x000000000000a054: je 0x9ef5; nop; leave; ret; 
0x000000000000a17c: je 0xa183; call 0x1180; leave; ret; 
0x0000000000001633: jge 0x1615; pcmpeqd mm1, qword ptr [rax - 0x17ba74b8]; leave; ret; 
0x0000000000009cea: jge 0x9cd4; add byte ptr [rbp - 0x76], dh; nop; leave; ret; 
0x000000000000124f: jmp rax; 
0x0000000000001290: jmp rax; 
0x000000000000288c: jmp rax; 
0x0000000000003af8: jmp rax; 
0x0000000000004591: jmp rax; 
0x000000000000498d: jmp rax; 
0x000000000000566a: jmp rax; 
0x000000000000596a: jmp rax; 
0x0000000000005bfe: jmp rax; 
0x000000000000509a: jne 0x3ab0; nop; nop; leave; ret; 
0x0000000000003af1: jne 0x3af3; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000008545: jne 0x8537; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009995: jne 0x9987; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009c35: jne 0x9c36; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000009ced: jne 0x9c79; nop; leave; ret; 
0x0000000000003928: jns 0x3728; nop; pop rbp; ret; 
0x00000000000016f6: lea ecx, [rax + 8]; mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x00000000000016f5: lea rcx, [rax + 8]; mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x000000000000136f: leave; ret; 
0x00000000000013bd: leave; ret; 
0x00000000000013f3: leave; ret; 
0x000000000000144a: leave; ret; 
0x00000000000014b3: leave; ret; 
0x00000000000014f6: leave; ret; 
0x000000000000163c: leave; ret; 
0x000000000000167e: leave; ret; 
0x0000000000001719: leave; ret; 
0x00000000000036fb: leave; ret; 
0x000000000000397c: leave; ret; 
0x00000000000050a2: leave; ret; 
0x0000000000005307: leave; ret; 
0x0000000000005585: leave; ret; 
0x0000000000005604: leave; ret; 
0x0000000000005d3e: leave; ret; 
0x0000000000005dc2: leave; ret; 
0x0000000000008535: leave; ret; 
0x00000000000085e0: leave; ret; 
0x000000000000867a: leave; ret; 
0x000000000000878f: leave; ret; 
0x00000000000087e1: leave; ret; 
0x0000000000008843: leave; ret; 
0x0000000000008915: leave; ret; 
0x0000000000008984: leave; ret; 
0x0000000000008a03: leave; ret; 
0x0000000000008af2: leave; ret; 
0x0000000000009985: leave; ret; 
0x0000000000009a44: leave; ret; 
0x0000000000009abd: leave; ret; 
0x0000000000009c1a: leave; ret; 
0x0000000000009c4d: leave; ret; 
0x0000000000009cf0: leave; ret; 
0x0000000000009d5f: leave; ret; 
0x0000000000009e7e: leave; ret; 
0x0000000000009ede: leave; ret; 
0x000000000000a05b: leave; ret; 
0x000000000000a0da: leave; ret; 
0x000000000000a183: leave; ret; 
0x0000000000009ab7: mov ah, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000001443: mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000012cc: mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000009fca: mov dh, 0x40; or byte ptr [rax], bh; ret 0x4f74; 
0x0000000000005518: mov dh, 0x45; xlatb; pop rbp; ret; 
0x0000000000009fbb: mov dh, 0x50; or byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x75]; and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x0000000000009a3c: mov dword ptr [rax + 0x10], 0; nop; leave; ret; 
0x00000000000099f6: mov dword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000008b45: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000008ba3: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000008c01: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5f: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000008cbd: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000008d1b: mov dword ptr [rax + 0x6028], edx; mov eax, 1; pop rbp; ret; 
0x0000000000009e73: mov dword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000001712: mov dword ptr [rax + 0x60a0], edx; nop; leave; ret; 
0x0000000000009c16: mov dword ptr [rax + 8], edx; nop; leave; ret; 
0x0000000000008e23: mov dword ptr [rax + rcx*8 + 8], edx; mov eax, 1; pop rbp; ret; 
0x0000000000009075: mov dword ptr [rax + rcx*8 + 8], edx; mov eax, 1; pop rbp; ret; 
0x000000000000926d: mov dword ptr [rax + rcx*8 + 8], edx; mov eax, 1; pop rbp; ret; 
0x00000000000095d2: mov dword ptr [rax + rcx*8 + 8], edx; mov eax, 1; pop rbp; ret; 
0x0000000000009978: mov dword ptr [rax + rdx*8 + 8], 0xffffffff; mov eax, 1; leave; ret; 
0x0000000000009133: mov dword ptr [rax + rdx*8 + 8], 1; mov eax, 1; pop rbp; ret; 
0x00000000000096b0: mov dword ptr [rax + rdx*8 + 8], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008d74: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008dcb: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed9: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008f30: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008f87: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008fe3: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x000000000000903f: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x000000000000919e: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000009205: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x00000000000093e3: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x000000000000944a: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x00000000000094b1: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x000000000000951d: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000009589: mov dword ptr [rax + rdx*8 + 8], ecx; mov eax, 1; pop rbp; ret; 
0x0000000000008e82: mov dword ptr [rax + rdx*8 + 8], esi; mov eax, 1; pop rbp; ret; 
0x00000000000092dc: mov dword ptr [rax + rdx*8 + 8], esi; mov eax, 1; pop rbp; ret; 
0x000000000000937c: mov dword ptr [rax + rdx*8 + 8], esi; mov eax, 1; pop rbp; ret; 
0x000000000000999b: mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000854b: mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009994: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008544: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009ab8: mov eax, 0; leave; ret; 
0x0000000000008551: mov eax, 0; pop rbp; ret; 
0x0000000000005dbd: mov eax, 1; leave; ret; 
0x00000000000085db: mov eax, 1; leave; ret; 
0x0000000000008675: mov eax, 1; leave; ret; 
0x000000000000878a: mov eax, 1; leave; ret; 
0x00000000000087dc: mov eax, 1; leave; ret; 
0x000000000000883e: mov eax, 1; leave; ret; 
0x0000000000008910: mov eax, 1; leave; ret; 
0x000000000000897f: mov eax, 1; leave; ret; 
0x00000000000089fe: mov eax, 1; leave; ret; 
0x0000000000008aed: mov eax, 1; leave; ret; 
0x0000000000009980: mov eax, 1; leave; ret; 
0x0000000000008b4b: mov eax, 1; pop rbp; ret; 
0x0000000000008ba9: mov eax, 1; pop rbp; ret; 
0x0000000000008c07: mov eax, 1; pop rbp; ret; 
0x0000000000008c65: mov eax, 1; pop rbp; ret; 
0x0000000000008cc3: mov eax, 1; pop rbp; ret; 
0x0000000000008d21: mov eax, 1; pop rbp; ret; 
0x0000000000008d78: mov eax, 1; pop rbp; ret; 
0x0000000000008dcf: mov eax, 1; pop rbp; ret; 
0x0000000000008e27: mov eax, 1; pop rbp; ret; 
0x0000000000008e86: mov eax, 1; pop rbp; ret; 
0x0000000000008edd: mov eax, 1; pop rbp; ret; 
0x0000000000008f34: mov eax, 1; pop rbp; ret; 
0x0000000000008f8b: mov eax, 1; pop rbp; ret; 
0x0000000000008fe7: mov eax, 1; pop rbp; ret; 
0x0000000000009043: mov eax, 1; pop rbp; ret; 
0x0000000000009079: mov eax, 1; pop rbp; ret; 
0x000000000000913b: mov eax, 1; pop rbp; ret; 
0x00000000000091a2: mov eax, 1; pop rbp; ret; 
0x0000000000009209: mov eax, 1; pop rbp; ret; 
0x0000000000009271: mov eax, 1; pop rbp; ret; 
0x00000000000092e0: mov eax, 1; pop rbp; ret; 
0x0000000000009380: mov eax, 1; pop rbp; ret; 
0x00000000000093e7: mov eax, 1; pop rbp; ret; 
0x000000000000944e: mov eax, 1; pop rbp; ret; 
0x00000000000094b5: mov eax, 1; pop rbp; ret; 
0x0000000000009521: mov eax, 1; pop rbp; ret; 
0x000000000000958d: mov eax, 1; pop rbp; ret; 
0x00000000000095d6: mov eax, 1; pop rbp; ret; 
0x00000000000096b8: mov eax, 1; pop rbp; ret; 
0x00000000000099a1: mov eax, 1; pop rbp; ret; 
0x0000000000009aaf: mov eax, dword ptr [rax + 8]; cmp qword ptr [rbp - 0x10], rax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000001311: mov eax, dword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x0000000000001471: mov eax, dword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x000000000000136d: mov eax, dword ptr [rax]; leave; ret; 
0x00000000000013bb: mov eax, dword ptr [rax]; leave; ret; 
0x000000000000a050: mov eax, dword ptr [rax]; test eax, eax; je 0x9ef5; nop; leave; ret; 
0x0000000000009adf: mov eax, dword ptr [rbp - 0x10]; imul rax, qword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x000000000000130d: mov eax, dword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x000000000000146d: mov eax, dword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x0000000000001639: mov eax, dword ptr [rbp - 0x18]; leave; ret; 
0x000000000000170a: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x00000000000016fa: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x000000000000996d: mov eax, dword ptr [rbp - 0x28]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000008e18: mov eax, dword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906a: mov eax, dword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009262: mov eax, dword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095c7: mov eax, dword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d69: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dc0: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ece: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f25: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f7c: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fd8: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009034: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009193: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091fa: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093d8: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000943f: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094a6: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009512: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000957e: mov eax, dword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000001447: mov eax, dword ptr [rbp - 8]; leave; ret; 
0x0000000000001440: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000009998: mov eax, dword ptr [rbp - 8]; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008548: mov eax, dword ptr [rbp - 8]; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009a38: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x00000000000099f2: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000008b41: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008b9f: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008bfd: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5b: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cb9: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d17: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009e6f: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009c12: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000001369: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax]; leave; ret; 
0x00000000000013b7: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000009a8c: mov eax, dword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x0000000000001672: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x1120; nop; leave; ret; 
0x0000000000001285: mov eax, dword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x0000000000001244: mov eax, dword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x0000000000001009: mov eax, dword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000009a90: mov ecx, dword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x00000000000014a4: mov ecx, edx; mov rdx, rax; mov esi, 0x10; call 0x9a46; leave; ret; 
0x0000000000009c42: mov edi, 1; call 0x1160; nop; leave; ret; 
0x00000000000012bc: mov edi, dword ptr [rip + 0xcd46]; call 0x1110; call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000001676: mov edi, eax; call 0x1120; nop; leave; ret; 
0x0000000000005db6: mov edi, eax; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000003974: mov edi, eax; call 0x36fd; nop; leave; ret; 
0x0000000000009ed6: mov edi, eax; call 0x9a00; nop; leave; ret; 
0x000000000000a0d2: mov edi, eax; call 0x9c4f; nop; leave; ret; 
0x0000000000009a97: mov edi, eax; call rcx; 
0x0000000000001701: mov edi, eax; call rdx; 
0x00000000000085d4: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000866e: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008783: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d5: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008837: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008909: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008978: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f7: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae6: mov edi, ecx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000013eb: mov edi, ecx; call 0x9aec; nop; leave; ret; 
0x00000000000014ee: mov edi, ecx; call 0x9aec; nop; leave; ret; 
0x000000000000170e: mov edx, dword ptr [rbp - 0x20]; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x00000000000014a7: mov edx, eax; mov esi, 0x10; call 0x9a46; leave; ret; 
0x0000000000009adc: mov edx, eax; mov rax, qword ptr [rbp - 0x10]; imul rax, qword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x00000000000085d1: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000866b: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008780: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d2: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008834: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008906: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008975: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f4: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae3: mov edx, eax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000014a9: mov esi, 0x10; call 0x9a46; leave; ret; 
0x0000000000009c40: mov esi, eax; mov edi, 1; call 0x1160; nop; leave; ret; 
0x0000000000005db3: mov esi, ecx; mov rdi, rax; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000003971: mov esi, ecx; mov rdi, rax; call 0x36fd; nop; leave; ret; 
0x000000000000a0cf: mov esi, ecx; mov rdi, rax; call 0x9c4f; nop; leave; ret; 
0x00000000000016fe: mov esi, ecx; mov rdi, rax; call rdx; 
0x0000000000009a94: mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000009a3b: mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x00000000000099f5: mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000008b44: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008ba2: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c00: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5e: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cbc: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d1a: mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009e72: mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000001711: mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x0000000000009c15: mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000008e22: mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009074: mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000926c: mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095d1: mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009977: mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000009132: mov qword ptr [rax + rdx*8 + 8], 1; mov eax, 1; pop rbp; ret; 
0x00000000000096af: mov qword ptr [rax + rdx*8 + 8], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008d73: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dca: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ed8: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f2f: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f86: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fe2: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000903e: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000919d: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009204: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093e2: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009449: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094b0: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000951c: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009588: mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008e81: mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x00000000000092db: mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x000000000000937b: mov qword ptr [rax + rdx*8 + 8], rsi; mov eax, 1; pop rbp; ret; 
0x0000000000009993: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008543: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009aae: mov rax, qword ptr [rax + 8]; cmp qword ptr [rbp - 0x10], rax; jb 0x9a6c; mov eax, 0; leave; ret; 
0x0000000000001310: mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x0000000000001470: mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x000000000000136c: mov rax, qword ptr [rax]; leave; ret; 
0x00000000000013ba: mov rax, qword ptr [rax]; leave; ret; 
0x0000000000009ade: mov rax, qword ptr [rbp - 0x10]; imul rax, qword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x000000000000130c: mov rax, qword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x000000000000146c: mov rax, qword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp qword ptr [rbp - 8], rax; sete al; pop rbp; ret; 
0x0000000000001638: mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000001709: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x00000000000016f9: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call rdx; 
0x000000000000996c: mov rax, qword ptr [rbp - 0x28]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], 0xffffffffffffffff; mov eax, 1; leave; ret; 
0x0000000000008e17: mov rax, qword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009069: mov rax, qword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009261: mov rax, qword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095c6: mov rax, qword ptr [rbp - 8]; add rcx, 0xc00; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d68: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008dbf: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008ecd: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f24: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008f7b: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000008fd7: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009033: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009192: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000091f9: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000093d7: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000943e: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x00000000000094a5: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000009511: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x000000000000957d: mov rax, qword ptr [rbp - 8]; add rdx, 0xc00; mov qword ptr [rax + rdx*8 + 8], rcx; mov eax, 1; pop rbp; ret; 
0x0000000000001446: mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000143f: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000009997: mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008547: mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], 2; mov eax, 0; pop rbp; ret; 
0x0000000000009a37: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x00000000000099f1: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000008b40: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008b9e: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008bfc: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008c5a: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008cb8: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000008d16: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x6028], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009e6e: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x60a0], 0; nop; leave; ret; 
0x0000000000009c11: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000001368: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; leave; ret; 
0x00000000000013b6: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000009a8b: mov rax, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x0000000000001671: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x1120; nop; leave; ret; 
0x0000000000001284: mov rax, qword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x0000000000001243: mov rax, qword ptr [rip + 0xcd96]; test rax, rax; je 0x1258; jmp rax; 
0x0000000000001008: mov rax, qword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000009a8f: mov rcx, qword ptr [rbp - 0x30]; mov rsi, rdx; mov rdi, rax; call rcx; 
0x00000000000014a3: mov rcx, rdx; mov rdx, rax; mov esi, 0x10; call 0x9a46; leave; ret; 
0x00000000000012bb: mov rdi, qword ptr [rip + 0xcd46]; call 0x1110; call 0x1230; mov byte ptr [rip + 0xcd3d], 1; pop rbp; ret; 
0x0000000000001675: mov rdi, rax; call 0x1120; nop; leave; ret; 
0x0000000000005db5: mov rdi, rax; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000003973: mov rdi, rax; call 0x36fd; nop; leave; ret; 
0x0000000000009ed5: mov rdi, rax; call 0x9a00; nop; leave; ret; 
0x000000000000a0d1: mov rdi, rax; call 0x9c4f; nop; leave; ret; 
0x0000000000009a96: mov rdi, rax; call rcx; 
0x0000000000001700: mov rdi, rax; call rdx; 
0x00000000000085d3: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000866d: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008782: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d4: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008836: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008908: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008977: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f6: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae5: mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000013ea: mov rdi, rcx; call 0x9aec; nop; leave; ret; 
0x00000000000014ed: mov rdi, rcx; call 0x9aec; nop; leave; ret; 
0x000000000000170d: mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 0x60a0], rdx; nop; leave; ret; 
0x00000000000014a6: mov rdx, rax; mov esi, 0x10; call 0x9a46; leave; ret; 
0x0000000000009adb: mov rdx, rax; mov rax, qword ptr [rbp - 0x10]; imul rax, qword ptr [rbp - 0x18]; add rax, rdx; pop rbp; ret; 
0x00000000000085d0: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000866a: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x000000000000877f: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000087d1: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008833: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008905: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008974: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x00000000000089f3: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000008ae2: mov rdx, rax; mov rdi, rcx; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000009c3f: mov rsi, rax; mov edi, 1; call 0x1160; nop; leave; ret; 
0x0000000000005db2: mov rsi, rcx; mov rdi, rax; call 0x11d0; mov eax, 1; leave; ret; 
0x0000000000003970: mov rsi, rcx; mov rdi, rax; call 0x36fd; nop; leave; ret; 
0x000000000000a0ce: mov rsi, rcx; mov rdi, rax; call 0x9c4f; nop; leave; ret; 
0x00000000000016fd: mov rsi, rcx; mov rdi, rax; call rdx; 
0x0000000000009a93: mov rsi, rdx; mov rdi, rax; call rcx; 
0x0000000000009fc5: movabs al, byte ptr [0x380840b60f000060]; ret 0x4f74; 
0x0000000000009e75: movabs al, byte ptr [0x9000000000000060]; leave; ret; 
0x0000000000001342: movabs dword ptr [0x8948d18948ffffff], eax; ret 0x8be; 
0x0000000000005517: movzx eax, byte ptr [rbp - 0x29]; pop rbp; ret; 
0x0000000000001293: nop dword ptr [rax + rax]; ret; 
0x0000000000001251: nop dword ptr [rax]; ret; 
0x00000000000012d5: nop dword ptr [rax]; ret; 
0x0000000000001292: nop word ptr [rax + rax]; ret; 
0x00000000000013f2: nop; leave; ret; 
0x00000000000014f5: nop; leave; ret; 
0x000000000000167d: nop; leave; ret; 
0x0000000000001718: nop; leave; ret; 
0x000000000000397b: nop; leave; ret; 
0x00000000000050a1: nop; leave; ret; 
0x0000000000005584: nop; leave; ret; 
0x0000000000005603: nop; leave; ret; 
0x0000000000005d3d: nop; leave; ret; 
0x0000000000009a43: nop; leave; ret; 
0x0000000000009c19: nop; leave; ret; 
0x0000000000009c4c: nop; leave; ret; 
0x0000000000009cef: nop; leave; ret; 
0x0000000000009e7d: nop; leave; ret; 
0x0000000000009edd: nop; leave; ret; 
0x000000000000a05a: nop; leave; ret; 
0x000000000000a0d9: nop; leave; ret; 
0x00000000000050a0: nop; nop; leave; ret; 
0x0000000000005583: nop; nop; leave; ret; 
0x0000000000005602: nop; nop; leave; ret; 
0x0000000000005d3c: nop; nop; leave; ret; 
0x000000000000392e: nop; pop rbp; ret; 
0x00000000000099fd: nop; pop rbp; ret; 
0x0000000000007433: nop; push rax; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000008b46: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008ba4: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c02: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c60: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008cbe: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d1c: nop; sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008e7e: or al, 0; add byte ptr [rax - 0x77], cl; je 0x8e55; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000092d8: or al, 0; add byte ptr [rax - 0x77], cl; je 0x92af; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009378: or al, 0; add byte ptr [rax - 0x77], cl; je 0x934f; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d70: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008dc7: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008ed5: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f2c: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f83: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008fdf: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000903b: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000919a: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009201: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000093df: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009446: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000094ad: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009519: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009585: or al, 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009962: or bl, ch; sbb ecx, dword ptr [rax - 0x75]; ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000967a: or byte ptr [rax + 0x39], cl; ret 0x1d73; 
0x0000000000009622: or byte ptr [rax + 0x39], cl; ret 0x1d76; 
0x0000000000009b55: or byte ptr [rax + 0x39], cl; ret 0x2472; 
0x0000000000009b54: or byte ptr [rax + 0x39], cl; ret 0x2472; 
0x0000000000008d77: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008dce: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008e26: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008e85: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008edc: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008f33: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008f8a: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008fe6: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009042: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009078: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000091a1: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009208: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009270: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000092df: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000937f: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000093e6: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000944d: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000094b4: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000009520: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000000958c: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000095d5: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000096da: or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000096ff: or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009743: or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009885: or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000893d: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x00000000000089ac: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000008a9b: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7f]; ret 0xc00; 
0x0000000000005361: or byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x4477; 
0x0000000000005476: or byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000001007: or byte ptr [rax - 0x75], cl; add eax, 0xcfd9; test rax, rax; je 0x1016; call rax; 
0x00000000000016f8: or byte ptr [rax - 0x75], cl; call 0x48cea049; mov edi, eax; call rdx; 
0x00000000000016f7: or byte ptr [rax - 0x75], cl; call 0x48cea049; mov edi, eax; call rdx; 
0x0000000000001445: or byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000000143e: or byte ptr [rax - 0x75], cl; clc; mov byte ptr [rax + 8], dl; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000009fbd: or byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x75]; and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x00000000000085cf: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000085ce: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000008669: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000008668: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000000877e: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000000877d: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000009fcc: or byte ptr [rax], bh; ret 0x4f74; 
0x0000000000009fcb: or byte ptr [rax], dil; ret 0x4f74; 
0x0000000000009136: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000096b3: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000001635: pcmpeqd mm1, qword ptr [rax - 0x17ba74b8]; leave; ret; 
0x00000000000012d3: pop rbp; ret; 
0x000000000000131a: pop rbp; ret; 
0x000000000000147a: pop rbp; ret; 
0x000000000000392f: pop rbp; ret; 
0x000000000000551b: pop rbp; ret; 
0x0000000000008556: pop rbp; ret; 
0x0000000000008b50: pop rbp; ret; 
0x0000000000008bae: pop rbp; ret; 
0x0000000000008c0c: pop rbp; ret; 
0x0000000000008c6a: pop rbp; ret; 
0x0000000000008cc8: pop rbp; ret; 
0x0000000000008d26: pop rbp; ret; 
0x0000000000008d7d: pop rbp; ret; 
0x0000000000008dd4: pop rbp; ret; 
0x0000000000008e2c: pop rbp; ret; 
0x0000000000008e8b: pop rbp; ret; 
0x0000000000008ee2: pop rbp; ret; 
0x0000000000008f39: pop rbp; ret; 
0x0000000000008f90: pop rbp; ret; 
0x0000000000008fec: pop rbp; ret; 
0x0000000000009048: pop rbp; ret; 
0x000000000000907e: pop rbp; ret; 
0x0000000000009140: pop rbp; ret; 
0x00000000000091a7: pop rbp; ret; 
0x000000000000920e: pop rbp; ret; 
0x0000000000009276: pop rbp; ret; 
0x00000000000092e5: pop rbp; ret; 
0x0000000000009385: pop rbp; ret; 
0x00000000000093ec: pop rbp; ret; 
0x0000000000009453: pop rbp; ret; 
0x00000000000094ba: pop rbp; ret; 
0x0000000000009526: pop rbp; ret; 
0x0000000000009592: pop rbp; ret; 
0x00000000000095db: pop rbp; ret; 
0x00000000000096bd: pop rbp; ret; 
0x00000000000099a6: pop rbp; ret; 
0x00000000000099fe: pop rbp; ret; 
0x0000000000009aea: pop rbp; ret; 
0x0000000000007434: push rax; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000001444: push rax; or byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000009fbc: push rax; or byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x75]; and byte ptr [rax + 0xf000060], 0xb6; or byte ptr [rax], dil; ret 0x4f74; 
0x0000000000002b58: ret 0x1075; 
0x00000000000014a8: ret 0x10be; 
0x00000000000014e7: ret 0x10be; 
0x0000000000009100: ret 0x1d73; 
0x000000000000967d: ret 0x1d73; 
0x00000000000090b8: ret 0x1d76; 
0x0000000000009625: ret 0x1d76; 
0x0000000000009b58: ret 0x2472; 
0x0000000000002e9f: ret 0x3474; 
0x00000000000030df: ret 0x3575; 
0x0000000000002946: ret 0x3773; 
0x0000000000003082: ret 0x3773; 
0x0000000000003038: ret 0x3776; 
0x0000000000005367: ret 0x4477; 
0x0000000000008598: ret 0x4808; 
0x0000000000008622: ret 0x4808; 
0x0000000000008737: ret 0x4808; 
0x000000000000893c: ret 0x4808; 
0x00000000000089ab: ret 0x4808; 
0x0000000000008a9a: ret 0x4808; 
0x0000000000008e5f: ret 0x4810; 
0x00000000000092a9: ret 0x4810; 
0x0000000000009349: ret 0x4810; 
0x00000000000030cc: ret 0x4875; 
0x0000000000009fce: ret 0x4f74; 
0x00000000000028d8: ret 0x5173; 
0x0000000000002c78: ret 0x5275; 
0x0000000000002d38: ret 0x5275; 
0x0000000000002df8: ret 0x5275; 
0x0000000000002abb: ret 0x5375; 
0x00000000000029f4: ret 0x5475; 
0x0000000000002f8c: ret 0x6275; 
0x00000000000019b6: ret 0x6348; 
0x0000000000001b9d: ret 0x6348; 
0x00000000000034b5: ret 0x6348; 
0x0000000000006584: ret 0x6348; 
0x0000000000002c65: ret 0x6575; 
0x0000000000002d25: ret 0x6575; 
0x0000000000002de5: ret 0x6575; 
0x00000000000029e1: ret 0x6775; 
0x0000000000002f79: ret 0x7575; 
0x00000000000053a7: ret 0x830f; 
0x000000000000315c: ret 0x850f; 
0x0000000000009b15: ret 0x850f; 
0x00000000000024cb: ret 0x8948; 
0x0000000000002529: ret 0x8948; 
0x0000000000002a08: ret 0x8948; 
0x0000000000002a21: ret 0x8948; 
0x0000000000002acf: ret 0x8948; 
0x0000000000002ae8: ret 0x8948; 
0x0000000000002cec: ret 0x8948; 
0x0000000000002da1: ret 0x8948; 
0x0000000000005480: ret 0x8948; 
0x00000000000054c6: ret 0x8948; 
0x00000000000085d2: ret 0x8948; 
0x000000000000866c: ret 0x8948; 
0x0000000000008781: ret 0x8948; 
0x00000000000087d3: ret 0x8948; 
0x0000000000008835: ret 0x8948; 
0x0000000000008907: ret 0x8948; 
0x0000000000008976: ret 0x8948; 
0x00000000000089f5: ret 0x8948; 
0x0000000000008ae4: ret 0x8948; 
0x0000000000001797: ret 0x8b48; 
0x00000000000017c0: ret 0x8b48; 
0x00000000000017e9: ret 0x8b48; 
0x0000000000001816: ret 0x8b48; 
0x0000000000001843: ret 0x8b48; 
0x000000000000187e: ret 0x8b48; 
0x00000000000018c2: ret 0x8b48; 
0x00000000000018ea: ret 0x8b48; 
0x000000000000190d: ret 0x8b48; 
0x0000000000001917: ret 0x8b48; 
0x0000000000001937: ret 0x8b48; 
0x000000000000195d: ret 0x8b48; 
0x0000000000001983: ret 0x8b48; 
0x00000000000019ac: ret 0x8b48; 
0x00000000000019e5: ret 0x8b48; 
0x0000000000001a20: ret 0x8b48; 
0x0000000000001a64: ret 0x8b48; 
0x0000000000001aab: ret 0x8b48; 
0x0000000000001ae6: ret 0x8b48; 
0x0000000000001b1e: ret 0x8b48; 
0x0000000000001b44: ret 0x8b48; 
0x0000000000001b6a: ret 0x8b48; 
0x0000000000001b93: ret 0x8b48; 
0x0000000000001bcc: ret 0x8b48; 
0x0000000000001bf2: ret 0x8b48; 
0x0000000000001c1a: ret 0x8b48; 
0x0000000000001c47: ret 0x8b48; 
0x0000000000001c6a: ret 0x8b48; 
0x0000000000001c98: ret 0x8b48; 
0x0000000000001cdf: ret 0x8b48; 
0x0000000000001d1a: ret 0x8b48; 
0x0000000000001d52: ret 0x8b48; 
0x0000000000001d99: ret 0x8b48; 
0x0000000000001de0: ret 0x8b48; 
0x0000000000001e1b: ret 0x8b48; 
0x0000000000001e61: ret 0x8b48; 
0x0000000000001e87: ret 0x8b48; 
0x0000000000001eaf: ret 0x8b48; 
0x0000000000001ed5: ret 0x8b48; 
0x0000000000001efb: ret 0x8b48; 
0x0000000000001f33: ret 0x8b48; 
0x0000000000001f5d: ret 0x8b48; 
0x0000000000001faa: ret 0x8b48; 
0x0000000000001fed: ret 0x8b48; 
0x0000000000002035: ret 0x8b48; 
0x0000000000002062: ret 0x8b48; 
0x000000000000209d: ret 0x8b48; 
0x00000000000020e1: ret 0x8b48; 
0x0000000000002109: ret 0x8b48; 
0x000000000000212c: ret 0x8b48; 
0x0000000000002136: ret 0x8b48; 
0x0000000000002156: ret 0x8b48; 
0x000000000000217c: ret 0x8b48; 
0x00000000000021a2: ret 0x8b48; 
0x00000000000021cb: ret 0x8b48; 
0x00000000000021f5: ret 0x8b48; 
0x000000000000222f: ret 0x8b48; 
0x0000000000002259: ret 0x8b48; 
0x0000000000002293: ret 0x8b48; 
0x00000000000022bd: ret 0x8b48; 
0x00000000000022e7: ret 0x8b48; 
0x0000000000002321: ret 0x8b48; 
0x0000000000002357: ret 0x8b48; 
0x000000000000237d: ret 0x8b48; 
0x00000000000023a7: ret 0x8b48; 
0x00000000000023d4: ret 0x8b48; 
0x0000000000002401: ret 0x8b48; 
0x0000000000002444: ret 0x8b48; 
0x000000000000248c: ret 0x8b48; 
0x00000000000024ea: ret 0x8b48; 
0x0000000000002548: ret 0x8b48; 
0x000000000000258b: ret 0x8b48; 
0x00000000000025d3: ret 0x8b48; 
0x0000000000002600: ret 0x8b48; 
0x0000000000002630: ret 0x8b48; 
0x000000000000265d: ret 0x8b48; 
0x000000000000268a: ret 0x8b48; 
0x00000000000026cd: ret 0x8b48; 
0x0000000000002715: ret 0x8b48; 
0x0000000000002762: ret 0x8b48; 
0x000000000000278c: ret 0x8b48; 
0x00000000000027b9: ret 0x8b48; 
0x0000000000002804: ret 0x8b48; 
0x0000000000002851: ret 0x8b48; 
0x00000000000028ce: ret 0x8b48; 
0x000000000000293c: ret 0x8b48; 
0x0000000000002a9f: ret 0x8b48; 
0x0000000000002ab1: ret 0x8b48; 
0x0000000000002b8e: ret 0x8b48; 
0x0000000000002beb: ret 0x8b48; 
0x0000000000002e91: ret 0x8b48; 
0x000000000000317a: ret 0x8b48; 
0x00000000000031a2: ret 0x8b48; 
0x00000000000031c5: ret 0x8b48; 
0x00000000000031cf: ret 0x8b48; 
0x00000000000031ef: ret 0x8b48; 
0x0000000000003215: ret 0x8b48; 
0x000000000000323b: ret 0x8b48; 
0x0000000000003264: ret 0x8b48; 
0x000000000000326e: ret 0x8b48; 
0x0000000000003296: ret 0x8b48; 
0x00000000000032c4: ret 0x8b48; 
0x00000000000032f2: ret 0x8b48; 
0x000000000000332d: ret 0x8b48; 
0x0000000000003371: ret 0x8b48; 
0x0000000000003399: ret 0x8b48; 
0x00000000000033bc: ret 0x8b48; 
0x00000000000033c6: ret 0x8b48; 
0x00000000000033e6: ret 0x8b48; 
0x000000000000340c: ret 0x8b48; 
0x0000000000003432: ret 0x8b48; 
0x0000000000003457: ret 0x8b48; 
0x0000000000003482: ret 0x8b48; 
0x00000000000034ab: ret 0x8b48; 
0x00000000000034e4: ret 0x8b48; 
0x0000000000003537: ret 0x8b48; 
0x000000000000357a: ret 0x8b48; 
0x00000000000035bd: ret 0x8b48; 
0x0000000000003605: ret 0x8b48; 
0x0000000000003632: ret 0x8b48; 
0x0000000000003660: ret 0x8b48; 
0x0000000000003740: ret 0x8b48; 
0x0000000000003763: ret 0x8b48; 
0x000000000000379c: ret 0x8b48; 
0x00000000000037a3: ret 0x8b48; 
0x00000000000037e1: ret 0x8b48; 
0x000000000000381e: ret 0x8b48; 
0x0000000000003825: ret 0x8b48; 
0x0000000000003867: ret 0x8b48; 
0x000000000000389a: ret 0x8b48; 
0x00000000000038a1: ret 0x8b48; 
0x00000000000038e5: ret 0x8b48; 
0x0000000000003910: ret 0x8b48; 
0x00000000000039f6: ret 0x8b48; 
0x0000000000003a32: ret 0x8b48; 
0x0000000000003a78: ret 0x8b48; 
0x0000000000003ac4: ret 0x8b48; 
0x0000000000003b45: ret 0x8b48; 
0x0000000000003b96: ret 0x8b48; 
0x0000000000003bdd: ret 0x8b48; 
0x0000000000003c22: ret 0x8b48; 
0x0000000000003c6e: ret 0x8b48; 
0x0000000000003cc2: ret 0x8b48; 
0x0000000000003d09: ret 0x8b48; 
0x0000000000003d50: ret 0x8b48; 
0x0000000000003dc5: ret 0x8b48; 
0x0000000000003e0c: ret 0x8b48; 
0x0000000000003e53: ret 0x8b48; 
0x0000000000003ea4: ret 0x8b48; 
0x0000000000003ef5: ret 0x8b48; 
0x0000000000003f3a: ret 0x8b48; 
0x0000000000003f7f: ret 0x8b48; 
0x0000000000003fcb: ret 0x8b48; 
0x000000000000401f: ret 0x8b48; 
0x0000000000004066: ret 0x8b48; 
0x00000000000040ab: ret 0x8b48; 
0x0000000000004120: ret 0x8b48; 
0x0000000000004167: ret 0x8b48; 
0x00000000000041ac: ret 0x8b48; 
0x00000000000041fd: ret 0x8b48; 
0x000000000000424e: ret 0x8b48; 
0x0000000000004293: ret 0x8b48; 
0x00000000000042da: ret 0x8b48; 
0x0000000000004326: ret 0x8b48; 
0x000000000000437a: ret 0x8b48; 
0x00000000000043c1: ret 0x8b48; 
0x0000000000004408: ret 0x8b48; 
0x000000000000447d: ret 0x8b48; 
0x00000000000044c4: ret 0x8b48; 
0x000000000000450b: ret 0x8b48; 
0x000000000000455c: ret 0x8b48; 
0x00000000000046b1: ret 0x8b48; 
0x00000000000046f8: ret 0x8b48; 
0x000000000000473d: ret 0x8b48; 
0x000000000000478e: ret 0x8b48; 
0x00000000000047df: ret 0x8b48; 
0x0000000000004826: ret 0x8b48; 
0x0000000000004872: ret 0x8b48; 
0x00000000000048c5: ret 0x8b48; 
0x000000000000490c: ret 0x8b48; 
0x0000000000004956: ret 0x8b48; 
0x0000000000004a2d: ret 0x8b48; 
0x0000000000004d88: ret 0x8b48; 
0x0000000000004dcf: ret 0x8b48; 
0x0000000000004e16: ret 0x8b48; 
0x0000000000004e3a: ret 0x8b48; 
0x0000000000004e83: ret 0x8b48; 
0x0000000000004efb: ret 0x8b48; 
0x0000000000004f42: ret 0x8b48; 
0x0000000000004f89: ret 0x8b48; 
0x0000000000004fd0: ret 0x8b48; 
0x0000000000005017: ret 0x8b48; 
0x00000000000055ba: ret 0x8b48; 
0x00000000000055d0: ret 0x8b48; 
0x0000000000005e13: ret 0x8b48; 
0x0000000000005e35: ret 0x8b48; 
0x0000000000005e3c: ret 0x8b48; 
0x0000000000005e5c: ret 0x8b48; 
0x0000000000005e7c: ret 0x8b48; 
0x0000000000005f25: ret 0x8b48; 
0x0000000000005f47: ret 0x8b48; 
0x0000000000005f4e: ret 0x8b48; 
0x0000000000005f6e: ret 0x8b48; 
0x0000000000005f8e: ret 0x8b48; 
0x0000000000005fae: ret 0x8b48; 
0x0000000000005fd1: ret 0x8b48; 
0x0000000000005ff1: ret 0x8b48; 
0x0000000000006011: ret 0x8b48; 
0x0000000000006039: ret 0x8b48; 
0x000000000000605f: ret 0x8b48; 
0x0000000000006066: ret 0x8b48; 
0x000000000000608a: ret 0x8b48; 
0x00000000000060ae: ret 0x8b48; 
0x00000000000060d2: ret 0x8b48; 
0x00000000000060f6: ret 0x8b48; 
0x000000000000611d: ret 0x8b48; 
0x0000000000006124: ret 0x8b48; 
0x0000000000006143: ret 0x8b48; 
0x00000000000061c1: ret 0x8b48; 
0x00000000000061e3: ret 0x8b48; 
0x00000000000061ea: ret 0x8b48; 
0x000000000000620a: ret 0x8b48; 
0x000000000000622a: ret 0x8b48; 
0x000000000000624a: ret 0x8b48; 
0x000000000000626e: ret 0x8b48; 
0x000000000000629b: ret 0x8b48; 
0x00000000000062c1: ret 0x8b48; 
0x00000000000062e7: ret 0x8b48; 
0x00000000000062ee: ret 0x8b48; 
0x0000000000006312: ret 0x8b48; 
0x0000000000006336: ret 0x8b48; 
0x000000000000635a: ret 0x8b48; 
0x0000000000006381: ret 0x8b48; 
0x00000000000063a5: ret 0x8b48; 
0x00000000000063c5: ret 0x8b48; 
0x00000000000063e9: ret 0x8b48; 
0x0000000000006484: ret 0x8b48; 
0x00000000000064a6: ret 0x8b48; 
0x00000000000064ad: ret 0x8b48; 
0x00000000000064cd: ret 0x8b48; 
0x00000000000064ed: ret 0x8b48; 
0x000000000000650d: ret 0x8b48; 
0x0000000000006530: ret 0x8b48; 
0x0000000000006550: ret 0x8b48; 
0x000000000000657d: ret 0x8b48; 
0x00000000000065a4: ret 0x8b48; 
0x00000000000065ca: ret 0x8b48; 
0x00000000000065d1: ret 0x8b48; 
0x00000000000065f5: ret 0x8b48; 
0x0000000000006619: ret 0x8b48; 
0x000000000000663d: ret 0x8b48; 
0x0000000000006687: ret 0x8b48; 
0x00000000000066ab: ret 0x8b48; 
0x0000000000006762: ret 0x8b48; 
0x0000000000006784: ret 0x8b48; 
0x000000000000678b: ret 0x8b48; 
0x00000000000067ab: ret 0x8b48; 
0x00000000000067cb: ret 0x8b48; 
0x00000000000067ef: ret 0x8b48; 
0x0000000000006817: ret 0x8b48; 
0x0000000000006844: ret 0x8b48; 
0x00000000000068f8: ret 0x8b48; 
0x000000000000691a: ret 0x8b48; 
0x0000000000006921: ret 0x8b48; 
0x0000000000006941: ret 0x8b48; 
0x0000000000006961: ret 0x8b48; 
0x0000000000006985: ret 0x8b48; 
0x00000000000069ad: ret 0x8b48; 
0x00000000000069da: ret 0x8b48; 
0x0000000000006aa4: ret 0x8b48; 
0x0000000000006ac6: ret 0x8b48; 
0x0000000000006acd: ret 0x8b48; 
0x0000000000006aed: ret 0x8b48; 
0x0000000000006b0d: ret 0x8b48; 
0x0000000000006b2d: ret 0x8b48; 
0x0000000000006b54: ret 0x8b48; 
0x0000000000006b78: ret 0x8b48; 
0x0000000000006b7f: ret 0x8b48; 
0x0000000000006b9a: ret 0x8b48; 
0x0000000000006c4c: ret 0x8b48; 
0x0000000000006c6e: ret 0x8b48; 
0x0000000000006c75: ret 0x8b48; 
0x0000000000006c95: ret 0x8b48; 
0x0000000000006cb5: ret 0x8b48; 
0x0000000000006cd9: ret 0x8b48; 
0x0000000000006cfd: ret 0x8b48; 
0x0000000000006d04: ret 0x8b48; 
0x0000000000006d21: ret 0x8b48; 
0x0000000000006d42: ret 0x8b48; 
0x0000000000006dc0: ret 0x8b48; 
0x0000000000006de2: ret 0x8b48; 
0x0000000000006de9: ret 0x8b48; 
0x0000000000006e09: ret 0x8b48; 
0x0000000000006e29: ret 0x8b48; 
0x0000000000006e49: ret 0x8b48; 
0x0000000000006e6c: ret 0x8b48; 
0x0000000000006e8c: ret 0x8b48; 
0x0000000000006eac: ret 0x8b48; 
0x0000000000006ed4: ret 0x8b48; 
0x0000000000006efa: ret 0x8b48; 
0x0000000000006f01: ret 0x8b48; 
0x0000000000006f25: ret 0x8b48; 
0x0000000000006f49: ret 0x8b48; 
0x0000000000006f6d: ret 0x8b48; 
0x0000000000006f91: ret 0x8b48; 
0x0000000000006fb5: ret 0x8b48; 
0x0000000000007000: ret 0x8b48; 
0x000000000000711e: ret 0x8b48; 
0x0000000000007223: ret 0x8b48; 
0x000000000000732b: ret 0x8b48; 
0x000000000000743e: ret 0x8b48; 
0x000000000000753d: ret 0x8b48; 
0x000000000000755f: ret 0x8b48; 
0x0000000000007566: ret 0x8b48; 
0x0000000000007586: ret 0x8b48; 
0x00000000000075a6: ret 0x8b48; 
0x00000000000075c6: ret 0x8b48; 
0x00000000000075e9: ret 0x8b48; 
0x0000000000007618: ret 0x8b48; 
0x0000000000007641: ret 0x8b48; 
0x0000000000007663: ret 0x8b48; 
0x000000000000766a: ret 0x8b48; 
0x000000000000768a: ret 0x8b48; 
0x00000000000076aa: ret 0x8b48; 
0x00000000000076ca: ret 0x8b48; 
0x00000000000076ea: ret 0x8b48; 
0x0000000000007719: ret 0x8b48; 
0x000000000000774a: ret 0x8b48; 
0x000000000000782f: ret 0x8b48; 
0x0000000000007851: ret 0x8b48; 
0x0000000000007858: ret 0x8b48; 
0x0000000000007878: ret 0x8b48; 
0x0000000000007898: ret 0x8b48; 
0x00000000000078bc: ret 0x8b48; 
0x00000000000078e5: ret 0x8b48; 
0x0000000000007907: ret 0x8b48; 
0x000000000000790e: ret 0x8b48; 
0x000000000000792e: ret 0x8b48; 
0x000000000000794e: ret 0x8b48; 
0x0000000000007972: ret 0x8b48; 
0x000000000000799a: ret 0x8b48; 
0x00000000000079c6: ret 0x8b48; 
0x00000000000079ec: ret 0x8b48; 
0x0000000000007a1a: ret 0x8b48; 
0x0000000000007a7d: ret 0x8b48; 
0x0000000000007a9f: ret 0x8b48; 
0x0000000000007aa6: ret 0x8b48; 
0x0000000000007ac6: ret 0x8b48; 
0x0000000000007ae6: ret 0x8b48; 
0x0000000000007b06: ret 0x8b48; 
0x0000000000007b29: ret 0x8b48; 
0x0000000000007b49: ret 0x8b48; 
0x0000000000007b6d: ret 0x8b48; 
0x0000000000007b93: ret 0x8b48; 
0x0000000000007b9a: ret 0x8b48; 
0x0000000000007bbe: ret 0x8b48; 
0x0000000000007be2: ret 0x8b48; 
0x0000000000007c06: ret 0x8b48; 
0x0000000000007c2d: ret 0x8b48; 
0x0000000000007c51: ret 0x8b48; 
0x0000000000007c9c: ret 0x8b48; 
0x0000000000007d92: ret 0x8b48; 
0x0000000000007ec2: ret 0x8b48; 
0x0000000000007fc7: ret 0x8b48; 
0x00000000000080f4: ret 0x8b48; 
0x0000000000008116: ret 0x8b48; 
0x000000000000811d: ret 0x8b48; 
0x000000000000813d: ret 0x8b48; 
0x000000000000815d: ret 0x8b48; 
0x000000000000817d: ret 0x8b48; 
0x00000000000081a0: ret 0x8b48; 
0x00000000000081c7: ret 0x8b48; 
0x00000000000081ef: ret 0x8b48; 
0x0000000000008215: ret 0x8b48; 
0x000000000000821c: ret 0x8b48; 
0x0000000000008240: ret 0x8b48; 
0x0000000000008264: ret 0x8b48; 
0x0000000000008288: ret 0x8b48; 
0x00000000000082ac: ret 0x8b48; 
0x00000000000082d0: ret 0x8b48; 
0x00000000000082f4: ret 0x8b48; 
0x0000000000008318: ret 0x8b48; 
0x000000000000835a: ret 0x8b48; 
0x000000000000837c: ret 0x8b48; 
0x0000000000008383: ret 0x8b48; 
0x00000000000083a3: ret 0x8b48; 
0x00000000000083c3: ret 0x8b48; 
0x00000000000083e3: ret 0x8b48; 
0x0000000000008406: ret 0x8b48; 
0x000000000000842d: ret 0x8b48; 
0x0000000000008455: ret 0x8b48; 
0x000000000000847b: ret 0x8b48; 
0x0000000000008482: ret 0x8b48; 
0x00000000000084a6: ret 0x8b48; 
0x00000000000084ca: ret 0x8b48; 
0x0000000000008507: ret 0x8b48; 
0x0000000000009952: ret 0x8b48; 
0x0000000000009a76: ret 0x8b48; 
0x0000000000009add: ret 0x8b48; 
0x0000000000009b72: ret 0x8b48; 
0x0000000000009b9c: ret 0x8b48; 
0x0000000000009bde: ret 0x8b48; 
0x0000000000009c3a: ret 0x8b48; 
0x000000000000134b: ret 0x8be; 
0x0000000000001396: ret 0x8be; 
0x00000000000013e4: ret 0x8be; 
0x0000000000001c74: ret 0xb60f; 
0x0000000000006018: ret 0xb60f; 
0x00000000000060fd: ret 0xb60f; 
0x00000000000063f0: ret 0xb60f; 
0x0000000000006d28: ret 0xb60f; 
0x0000000000003843: ret 0xb70f; 
0x00000000000038c1: ret 0xb70f; 
0x0000000000009dca: ret 0xbe; 
0x00000000000015ca: ret 0xc00; 
0x00000000000015e2: ret 0xc00; 
0x0000000000008579: ret 0xc00; 
0x00000000000085b8: ret 0xc00; 
0x0000000000008603: ret 0xc00; 
0x0000000000008652: ret 0xc00; 
0x00000000000086a1: ret 0xc00; 
0x00000000000086d7: ret 0xc00; 
0x0000000000008718: ret 0xc00; 
0x0000000000008767: ret 0xc00; 
0x0000000000008866: ret 0xc00; 
0x0000000000008898: ret 0xc00; 
0x0000000000008943: ret 0xc00; 
0x00000000000089b2: ret 0xc00; 
0x0000000000008a26: ret 0xc00; 
0x0000000000008a58: ret 0xc00; 
0x0000000000008aa1: ret 0xc00; 
0x0000000000008b11: ret 0xc00; 
0x0000000000008b6f: ret 0xc00; 
0x0000000000008bcd: ret 0xc00; 
0x0000000000008c2b: ret 0xc00; 
0x0000000000008c89: ret 0xc00; 
0x0000000000008ce7: ret 0xc00; 
0x0000000000008d49: ret 0xc00; 
0x0000000000008d6e: ret 0xc00; 
0x0000000000008da0: ret 0xc00; 
0x0000000000008dc5: ret 0xc00; 
0x0000000000008df7: ret 0xc00; 
0x0000000000008e4f: ret 0xc00; 
0x0000000000008eae: ret 0xc00; 
0x0000000000008ed3: ret 0xc00; 
0x0000000000008f05: ret 0xc00; 
0x0000000000008f2a: ret 0xc00; 
0x0000000000008f5c: ret 0xc00; 
0x0000000000008f81: ret 0xc00; 
0x0000000000008fb3: ret 0xc00; 
0x0000000000008fdd: ret 0xc00; 
0x000000000000900f: ret 0xc00; 
0x0000000000009039: ret 0xc00; 
0x00000000000090a1: ret 0xc00; 
0x00000000000090c8: ret 0xc00; 
0x00000000000090e9: ret 0xc00; 
0x0000000000009110: ret 0xc00; 
0x000000000000912d: ret 0xc00; 
0x0000000000009163: ret 0xc00; 
0x000000000000917e: ret 0xc00; 
0x0000000000009198: ret 0xc00; 
0x00000000000091ca: ret 0xc00; 
0x00000000000091e5: ret 0xc00; 
0x00000000000091ff: ret 0xc00; 
0x0000000000009231: ret 0xc00; 
0x000000000000924c: ret 0xc00; 
0x0000000000009299: ret 0xc00; 
0x0000000000009308: ret 0xc00; 
0x0000000000009339: ret 0xc00; 
0x00000000000093a8: ret 0xc00; 
0x00000000000093c3: ret 0xc00; 
0x00000000000093dd: ret 0xc00; 
0x000000000000940f: ret 0xc00; 
0x000000000000942a: ret 0xc00; 
0x0000000000009444: ret 0xc00; 
0x0000000000009476: ret 0xc00; 
0x0000000000009491: ret 0xc00; 
0x00000000000094ab: ret 0xc00; 
0x00000000000094dd: ret 0xc00; 
0x00000000000094f8: ret 0xc00; 
0x0000000000009517: ret 0xc00; 
0x0000000000009549: ret 0xc00; 
0x0000000000009564: ret 0xc00; 
0x0000000000009583: ret 0xc00; 
0x00000000000095bc: ret 0xc00; 
0x00000000000095fe: ret 0xc00; 
0x0000000000009635: ret 0xc00; 
0x0000000000009656: ret 0xc00; 
0x000000000000968d: ret 0xc00; 
0x00000000000096aa: ret 0xc00; 
0x00000000000096e4: ret 0xc00; 
0x0000000000009709: ret 0xc00; 
0x0000000000009729: ret 0xc00; 
0x000000000000974d: ret 0xc00; 
0x000000000000976e: ret 0xc00; 
0x0000000000009793: ret 0xc00; 
0x00000000000097b6: ret 0xc00; 
0x00000000000097d9: ret 0xc00; 
0x00000000000097f4: ret 0xc00; 
0x0000000000009816: ret 0xc00; 
0x000000000000983a: ret 0xc00; 
0x000000000000986b: ret 0xc00; 
0x000000000000988f: ret 0xc00; 
0x00000000000098af: ret 0xc00; 
0x00000000000098e3: ret 0xc00; 
0x000000000000993b: ret 0xc00; 
0x0000000000009972: ret 0xc00; 
0x0000000000009cd8: ret 0xd75; 
0x00000000000024c7: ret 0xf48; 
0x0000000000002525: ret 0xf48; 
0x0000000000002ce8: ret 0xf48; 
0x0000000000002d9d: ret 0xf48; 
0x000000000000547c: ret 0xf48; 
0x00000000000054c2: ret 0xf48; 
0x0000000000009b7c: ret 0xf74; 
0x0000000000005aca: ret 0xffb6; 
0x00000000000057ca: ret 0xffb9; 
0x0000000000006d7a: ret 0xffef; 
0x000000000000101a: ret; 
0x0000000000001258: ret; 
0x0000000000001298: ret; 
0x00000000000012d4: ret; 
0x00000000000012d8: ret; 
0x000000000000131b: ret; 
0x0000000000001370: ret; 
0x00000000000013be: ret; 
0x00000000000013f4: ret; 
0x000000000000144b: ret; 
0x000000000000147b: ret; 
0x00000000000014b4: ret; 
0x00000000000014f7: ret; 
0x000000000000163d: ret; 
0x000000000000167f: ret; 
0x000000000000171a: ret; 
0x00000000000036fc: ret; 
0x0000000000003930: ret; 
0x000000000000397d: ret; 
0x00000000000050a3: ret; 
0x0000000000005308: ret; 
0x000000000000551c: ret; 
0x0000000000005582: ret; 
0x0000000000005586: ret; 
0x0000000000005605: ret; 
0x0000000000005d3f: ret; 
0x0000000000005dc3: ret; 
0x0000000000008536: ret; 
0x0000000000008557: ret; 
0x00000000000085e1: ret; 
0x000000000000867b: ret; 
0x0000000000008790: ret; 
0x00000000000087e2: ret; 
0x0000000000008844: ret; 
0x0000000000008916: ret; 
0x0000000000008985: ret; 
0x0000000000008a04: ret; 
0x0000000000008af3: ret; 
0x0000000000008b51: ret; 
0x0000000000008baf: ret; 
0x0000000000008c0d: ret; 
0x0000000000008c6b: ret; 
0x0000000000008cc9: ret; 
0x0000000000008d27: ret; 
0x0000000000008d7e: ret; 
0x0000000000008dd5: ret; 
0x0000000000008e2d: ret; 
0x0000000000008e8c: ret; 
0x0000000000008ee3: ret; 
0x0000000000008f3a: ret; 
0x0000000000008f91: ret; 
0x0000000000008fed: ret; 
0x0000000000009049: ret; 
0x000000000000907f: ret; 
0x0000000000009141: ret; 
0x00000000000091a8: ret; 
0x000000000000920f: ret; 
0x0000000000009277: ret; 
0x00000000000092e6: ret; 
0x0000000000009386: ret; 
0x00000000000093ed: ret; 
0x0000000000009454: ret; 
0x00000000000094bb: ret; 
0x0000000000009527: ret; 
0x0000000000009593: ret; 
0x00000000000095dc: ret; 
0x00000000000096be: ret; 
0x0000000000009986: ret; 
0x00000000000099a7: ret; 
0x00000000000099ff: ret; 
0x0000000000009a45: ret; 
0x0000000000009abe: ret; 
0x0000000000009aeb: ret; 
0x0000000000009c1b: ret; 
0x0000000000009c4e: ret; 
0x0000000000009cf1: ret; 
0x0000000000009d60: ret; 
0x0000000000009e7f: ret; 
0x0000000000009edf: ret; 
0x000000000000a05c: ret; 
0x000000000000a0db: ret; 
0x000000000000a184: ret; 
0x000000000000a194: ret; 
0x00000000000085cb: retf 0x8d48; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000008665: retf 0x8d48; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000000877a: retf 0x8d48; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000089fa: rol byte ptr [rdi + 0x1b8ffff], cl; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000008e1d: rol dword ptr [rax], 0xc; add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000000906f: rol dword ptr [rax], 0xc; add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000009267: rol dword ptr [rax], 0xc; add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000000095cc: rol dword ptr [rax], 0xc; add byte ptr [rax], al; mov qword ptr [rax + rcx*8 + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000006580: ror byte ptr [r8 + 1], 1; ret 0x6348; 
0x0000000000005e38: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000005f4a: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006062: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006120: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000061e6: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000062ea: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000064a9: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000065cd: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006787: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000691d: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006ac9: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006b7b: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006c71: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006d00: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006de5: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006efd: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006ffc: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000711a: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000721f: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007327: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000743a: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007562: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007666: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007854: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000790a: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007aa2: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007b96: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007c98: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007d8e: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007ebe: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000007fc3: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000008119: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000008218: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000837f: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000000847e: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000006014: ror byte ptr [r8 + 1], 1; ret 0xb60f; 
0x00000000000060f9: ror byte ptr [r8 + 1], 1; ret 0xb60f; 
0x00000000000063ec: ror byte ptr [r8 + 1], 1; ret 0xb60f; 
0x0000000000006d24: ror byte ptr [r8 + 1], 1; ret 0xb60f; 
0x000000000000980b: ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009967: ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x000000000000890c: ror byte ptr [rax + 0x1b8ffff], 0; add byte ptr [rax], al; leave; ret; 
0x0000000000006581: ror byte ptr [rax + 1], 1; ret 0x6348; 
0x0000000000005e39: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000005f4b: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006063: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006121: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x00000000000061e7: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x00000000000062eb: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x00000000000064aa: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x00000000000065ce: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006788: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000691e: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006aca: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006b7c: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006c72: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006d01: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006de6: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006efe: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006ffd: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000711b: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007220: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007328: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000743b: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007563: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007667: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007855: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000790b: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007aa3: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007b97: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007c99: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007d8f: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007ebf: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000007fc4: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000811a: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000008219: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000008380: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x000000000000847f: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000006015: ror byte ptr [rax + 1], 1; ret 0xb60f; 
0x00000000000060fa: ror byte ptr [rax + 1], 1; ret 0xb60f; 
0x00000000000063ed: ror byte ptr [rax + 1], 1; ret 0xb60f; 
0x0000000000006d25: ror byte ptr [rax + 1], 1; ret 0xb60f; 
0x000000000000980c: ror byte ptr [rax - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009968: ror byte ptr [rax - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009135: ror byte ptr [rax], 1; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000009134: ror byte ptr [rax], 1; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x00000000000096b2: ror byte ptr [rax], 1; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x00000000000096b1: ror byte ptr [rax], 1; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000008d76: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008d75: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008dcd: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008dcc: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008e84: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008edb: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008eda: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f32: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f31: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f89: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008f88: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008fe5: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000008fe4: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009041: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009040: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000091a0: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000919f: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009207: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x0000000000009206: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000092de: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000937e: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000093e5: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000093e4: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000944c: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000944b: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000094b3: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000094b2: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000951f: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000951e: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000958b: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x000000000000958a: ror byte ptr [rax], 1; mov eax, 1; pop rbp; ret; 
0x00000000000014a5: ror dword ptr [rax - 0x77], 1; ret 0x10be; 
0x0000000000001348: ror dword ptr [rax - 0x77], 1; ret 0x8be; 
0x000000000000128d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x000000000000124c: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000001011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000019b0: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x6348; 
0x0000000000001b97: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x6348; 
0x00000000000034af: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x6348; 
0x0000000000001911: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000002130: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x8b48; 
0x00000000000031c9: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000003268: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x8b48; 
0x00000000000033c0: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0x8b48; 
0x0000000000001c6e: sar ah, 0xff; dec dword ptr [rax + 1]; ret 0xb60f; 
0x000000000000288a: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000003af6: sar byte ptr [rsi], 1; jmp rax; 
0x000000000000458f: sar byte ptr [rsi], 1; jmp rax; 
0x000000000000498b: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005668: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005968: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000005bfc: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000001280: sar esi, 1; je 0x1298; mov rax, qword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x000000000000127f: sar rsi, 1; je 0x1298; mov rax, qword ptr [rip + 0xcd65]; test rax, rax; je 0x1298; jmp rax; 
0x0000000000009789: sbb byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x00000000000097cf: sbb byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009830: sbb byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000009964: sbb ecx, dword ptr [rax - 0x75]; ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x7f]; ret 0xc00; 
0x0000000000005601: scasb al, byte ptr [rdi]; nop; nop; leave; ret; 
0x0000000000009ae4: scasd eax, dword ptr [rdi]; call 0x5dd09c33; ret; 
0x0000000000002a07: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002a20: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002ace: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002ae7: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000002a9e: scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x0000000000001317: sete al; pop rbp; ret; 
0x0000000000001477: sete al; pop rbp; ret; 
0x0000000000008b47: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008ba5: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c03: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008c61: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008cbf: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000008d1d: sub byte ptr [rax], ah; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000000036f0: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x36fb; call 0x1180; leave; ret; 
0x00000000000052fc: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x5307; call 0x1180; leave; ret; 
0x000000000000852a: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x8535; call 0x1180; leave; ret; 
0x0000000000009d54: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x9d5f; call 0x1180; leave; ret; 
0x000000000000a178: sub byte ptr [rax], al; add byte ptr [rax], al; je 0xa183; call 0x1180; leave; ret; 
0x000000000000391f: sub dword ptr [rbp - 0x20], 1; cmp qword ptr [rbp - 0x20], 0; jns 0x3728; nop; pop rbp; ret; 
0x000000000000a18d: sub esp, 8; add rsp, 8; ret; 
0x0000000000001005: sub esp, 8; mov rax, qword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x000000000000391e: sub qword ptr [rbp - 0x20], 1; cmp qword ptr [rbp - 0x20], 0; jns 0x3728; nop; pop rbp; ret; 
0x000000000000a18c: sub rsp, 8; add rsp, 8; ret; 
0x0000000000001004: sub rsp, 8; mov rax, qword ptr [rip + 0xcfd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000005098: test al, al; jne 0x3ab0; nop; nop; leave; ret; 
0x000000000000a055: test byte ptr [rbx - 0x6f000002], bl; leave; ret; 
0x00000000000014b0: test dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000001010: test eax, eax; je 0x1016; call rax; 
0x0000000000001010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x000000000000124b: test eax, eax; je 0x1258; jmp rax; 
0x000000000000128c: test eax, eax; je 0x1298; jmp rax; 
0x000000000000a052: test eax, eax; je 0x9ef5; nop; leave; ret; 
0x000000000000100f: test rax, rax; je 0x1016; call rax; 
0x000000000000100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x000000000000124a: test rax, rax; je 0x1258; jmp rax; 
0x000000000000128b: test rax, rax; je 0x1298; jmp rax; 
0x0000000000002885: xchg dword ptr [rax], eax; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x00000000000014af: xchg ebx, eax; test dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000001246: xchg esi, eax; int 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000551a: xlatb; pop rbp; ret; 
0x0000000000005519: xlatb; pop rbp; ret; 

2399 gadgets found
