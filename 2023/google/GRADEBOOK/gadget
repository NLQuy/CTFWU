


Gadgets
=======


0x0000000000001233: adc al, 0x48; mov eax, dword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x00000000000011f2: adc eax, 0xce058b48; cmp eax, 0x85480000; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000001b17: add al, ch; ret; 
0x000000000000169e: add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000001d99: add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x00000000000018ba: add byte ptr [rax + 0x39], cl; ret 0x1e74; 
0x00000000000018ef: add byte ptr [rax + 0x39], cl; ret 0x3072; 
0x0000000000001b65: add byte ptr [rax + rax*8 + 0x5d90c775], al; ret; 
0x0000000000001362: add byte ptr [rax + rax*8 - 0x6f6f238b], al; leave; ret; 
0x000000000000123a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000011f9: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000100a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000021f2: add byte ptr [rax - 0x7d], cl; ret 0x4840; 
0x0000000000001203: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000001b15: add byte ptr [rax], al; add al, ch; ret; 
0x000000000000169c: add byte ptr [rax], al; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x00000000000012e1: add byte ptr [rax], al; add byte ptr [rax], al; call 0x1140; mov eax, 0; leave; ret; 
0x00000000000022e7: add byte ptr [rax], al; add byte ptr [rax], al; call 0x1160; nop; leave; ret; 
0x00000000000012eb: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x00000000000016a2: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000001204: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000012ec: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000016a3: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000012e3: add byte ptr [rax], al; call 0x1140; mov eax, 0; leave; ret; 
0x00000000000022e9: add byte ptr [rax], al; call 0x1160; nop; leave; ret; 
0x000000000000132b: add byte ptr [rax], al; call 0x1190; nop; leave; ret; 
0x0000000000001270: add byte ptr [rax], al; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x00000000000012ed: add byte ptr [rax], al; leave; ret; 
0x00000000000016a4: add byte ptr [rax], al; leave; ret; 
0x00000000000016d4: add byte ptr [rax], al; mov edi, eax; call 0x10d0; nop; pop rbp; ret; 
0x0000000000001206: add byte ptr [rax], al; ret; 
0x0000000000001246: add byte ptr [rax], al; ret; 
0x000000000000238a: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001009: add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; 
0x0000000000001009: add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x00000000000011f8: add byte ptr [rax], al; test rax, rax; je 0x1208; jmp rax; 
0x0000000000001239: add byte ptr [rax], al; test rax, rax; je 0x1248; jmp rax; 
0x0000000000001245: add byte ptr [rax], r8b; ret; 
0x0000000000001281: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000000126f: add byte ptr ds:[rax], al; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x000000000000126e: add byte ptr ds:[rax], al; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x00000000000012ee: add cl, cl; ret; 
0x00000000000016a5: add cl, cl; ret; 
0x0000000000001236: add eax, 0x3d9d; test rax, rax; je 0x1248; jmp rax; 
0x00000000000011f5: add eax, 0x3dce; test rax, rax; je 0x1208; jmp rax; 
0x0000000000001006: add eax, 0x3fc5; test rax, rax; je 0x1012; call rax; 
0x0000000000001006: add eax, 0x3fc5; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x00000000000016a0: add eax, 0xb8; add cl, cl; ret; 
0x0000000000001013: add esp, 8; ret; 
0x0000000000002391: add esp, 8; ret; 
0x0000000000001012: add rsp, 8; ret; 
0x0000000000002390: add rsp, 8; ret; 
0x00000000000015e4: call 0x1070; leave; ret; 
0x00000000000016d8: call 0x10d0; nop; pop rbp; ret; 
0x00000000000012e5: call 0x1140; mov eax, 0; leave; ret; 
0x00000000000022eb: call 0x1160; nop; leave; ret; 
0x000000000000132d: call 0x1190; nop; leave; ret; 
0x0000000000001272: call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x0000000000001277: call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x000000000000139d: call 0x1335; nop; leave; ret; 
0x000000000000149a: call 0x13ef; nop; leave; ret; 
0x0000000000001bb2: call 0x1b1f; nop; leave; ret; 
0x0000000000001ed3: call 0x48c6a820; mov edi, edx; call rcx; 
0x0000000000001ed2: call 0x48c6a820; mov edi, edx; call rcx; 
0x0000000000001f18: call 0x48c6a865; mov edi, edx; call rcx; 
0x0000000000001f17: call 0x48c6a865; mov edi, edx; call rcx; 
0x0000000000001f18: call 0x48c6a865; mov edi, edx; call rcx; leave; ret; 
0x0000000000001f17: call 0x48c6a865; mov edi, edx; call rcx; leave; ret; 
0x0000000000001d6c: call 0xffffffff9010a6b9; pop rbp; ret; 
0x0000000000001d6b: call 0xffffffff9010a6b9; pop rbp; ret; 
0x0000000000001298: call qword ptr [rbp + 0x48]; 
0x000000000000170b: call qword ptr [rbp + 0x48]; 
0x0000000000001010: call rax; 
0x0000000000001010: call rax; add rsp, 8; ret; 
0x0000000000001eda: call rcx; 
0x0000000000001f1f: call rcx; 
0x0000000000001f1f: call rcx; leave; ret; 
0x00000000000011f0: clc; je 0x1208; mov rax, qword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x0000000000001e44: clc; mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x0000000000001e43: clc; mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x0000000000001dbb: clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001dba: clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001ecf: clc; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f14: clc; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x00000000000015e0: clc; mov rdi, rax; call 0x1070; leave; ret; 
0x00000000000015df: clc; mov rdi, rax; call 0x1070; leave; ret; 
0x0000000000001d68: cmp byte ptr [rax - 0x75], cl; call 0xffffffff9010a6b9; pop rbp; ret; 
0x00000000000018ed: cmp byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3072; 
0x000000000000126d: cmp eax, 0x3e4e; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x0000000000001238: cmp eax, 0x85480000; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000011f7: cmp eax, 0x85480000; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x00000000000011ef: cmp eax, edi; je 0x1208; mov rax, qword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x00000000000011ee: cmp rax, rdi; je 0x1208; mov rax, qword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x00000000000015e8: dec ecx; ret; 
0x0000000000001b1c: dec ecx; ret; 
0x0000000000002387: fmul st(1), st(0); ret; 
0x0000000000001002: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x3fc5; test rax, rax; je 0x1012; call rax; 
0x0000000000001459: in eax, 0x90; leave; ret; 
0x0000000000001e40: int1; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x00000000000015db: jb 0x15af; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x1070; leave; ret; 
0x000000000000100e: je 0x1012; call rax; 
0x000000000000100e: je 0x1012; call rax; add rsp, 8; ret; 
0x00000000000011fd: je 0x1208; jmp rax; 
0x00000000000011f1: je 0x1208; mov rax, qword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x000000000000123e: je 0x1248; jmp rax; 
0x0000000000001232: je 0x1248; mov rax, qword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x0000000000001326: je 0x1332; mov edi, 0x3e8; call 0x1190; nop; leave; ret; 
0x00000000000011ff: jmp rax; 
0x0000000000001240: jmp rax; 
0x0000000000001365: jne 0x1343; nop; nop; leave; ret; 
0x00000000000013ea: jne 0x13b7; nop; leave; ret; 
0x0000000000001458: jne 0x143f; nop; leave; ret; 
0x0000000000001b68: jne 0x1b31; nop; pop rbp; ret; 
0x00000000000022e4: jne 0x22f0; mov edi, 0; call 0x1160; nop; leave; ret; 
0x0000000000001397: lea eax, [rbp - 0x20]; mov rdi, rax; call 0x1335; nop; leave; ret; 
0x0000000000001396: lea rax, [rbp - 0x20]; mov rdi, rax; call 0x1335; nop; leave; ret; 
0x00000000000012ef: leave; ret; 
0x0000000000001333: leave; ret; 
0x0000000000001369: leave; ret; 
0x00000000000013a3: leave; ret; 
0x00000000000013ed: leave; ret; 
0x000000000000145b: leave; ret; 
0x00000000000014a0: leave; ret; 
0x00000000000015e9: leave; ret; 
0x00000000000016a6: leave; ret; 
0x0000000000001b1d: leave; ret; 
0x0000000000001bb8: leave; ret; 
0x0000000000001d25: leave; ret; 
0x0000000000001e49: leave; ret; 
0x0000000000001f21: leave; ret; 
0x00000000000022f1: leave; ret; 
0x0000000000002388: leave; ret; 
0x0000000000001e45: mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x000000000000127c: mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x0000000000001b64: mov dh, 0; test al, al; jne 0x1b31; nop; pop rbp; ret; 
0x0000000000001d6e: mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x0000000000001dbd: mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x0000000000001ec9: mov dword ptr [rbp - 0x10], edx; mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f0e: mov dword ptr [rbp - 0x10], edx; mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x00000000000013e4: mov dword ptr [rbp - 0x10], edx; test rax, rax; jne 0x13b7; nop; leave; ret; 
0x0000000000001452: mov dword ptr [rbp - 0x10], edx; test rax, rax; jne 0x143f; nop; leave; ret; 
0x00000000000012e0: mov eax, 0; call 0x1140; mov eax, 0; leave; ret; 
0x00000000000012ea: mov eax, 0; leave; ret; 
0x00000000000016a1: mov eax, 0; leave; ret; 
0x0000000000001bab: mov eax, 0x48ce8948; mov edi, eax; call 0x1b1f; nop; leave; ret; 
0x0000000000001d6a: mov eax, dword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001e42: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x0000000000001db9: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x00000000000015de: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x1070; leave; ret; 
0x0000000000001235: mov eax, dword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x00000000000011f4: mov eax, dword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x0000000000001005: mov eax, dword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; 
0x0000000000001005: mov eax, dword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000001ed1: mov ecx, dword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f16: mov ecx, dword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f16: mov ecx, dword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; leave; ret; 
0x00000000000022e6: mov edi, 0; call 0x1160; nop; leave; ret; 
0x0000000000001328: mov edi, 0x3e8; call 0x1190; nop; leave; ret; 
0x000000000000126c: mov edi, dword ptr [rip + 0x3e4e]; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x00000000000015e2: mov edi, eax; call 0x1070; leave; ret; 
0x00000000000016d6: mov edi, eax; call 0x10d0; nop; pop rbp; ret; 
0x000000000000139b: mov edi, eax; call 0x1335; nop; leave; ret; 
0x0000000000001498: mov edi, eax; call 0x13ef; nop; leave; ret; 
0x0000000000001bb0: mov edi, eax; call 0x1b1f; nop; leave; ret; 
0x00000000000012de: mov edi, eax; mov eax, 0; call 0x1140; mov eax, 0; leave; ret; 
0x0000000000001ed8: mov edi, edx; call rcx; 
0x0000000000001f1d: mov edi, edx; call rcx; 
0x0000000000001f1d: mov edi, edx; call rcx; leave; ret; 
0x0000000000001d66: mov edx, dword ptr [rax + 0x38]; mov rax, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001ecd: mov edx, dword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f12: mov edx, dword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001ed5: mov esi, eax; mov rdi, rdx; call rcx; 
0x0000000000001f1a: mov esi, eax; mov rdi, rdx; call rcx; 
0x0000000000001f1a: mov esi, eax; mov rdi, rdx; call rcx; leave; ret; 
0x0000000000001bad: mov esi, ecx; mov rdi, rax; call 0x1b1f; nop; leave; ret; 
0x0000000000001495: mov esi, edx; mov rdi, rax; call 0x13ef; nop; leave; ret; 
0x0000000000001d6d: mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001dbc: mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001ec8: mov qword ptr [rbp - 0x10], rdx; mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f0d: mov qword ptr [rbp - 0x10], rdx; mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x00000000000013e3: mov qword ptr [rbp - 0x10], rdx; test rax, rax; jne 0x13b7; nop; leave; ret; 
0x0000000000001451: mov qword ptr [rbp - 0x10], rdx; test rax, rax; jne 0x143f; nop; leave; ret; 
0x0000000000001baa: mov r8d, 0x48ce8948; mov edi, eax; call 0x1b1f; nop; leave; ret; 
0x0000000000001d69: mov rax, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001e41: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x1f], dl; nop; leave; ret; 
0x0000000000001db8: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x00000000000015dd: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x1070; leave; ret; 
0x0000000000001234: mov rax, qword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x00000000000011f3: mov rax, qword ptr [rip + 0x3dce]; test rax, rax; je 0x1208; jmp rax; 
0x0000000000001004: mov rax, qword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; 
0x0000000000001004: mov rax, qword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000001ed0: mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f15: mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f15: mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; leave; ret; 
0x000000000000126b: mov rdi, qword ptr [rip + 0x3e4e]; call 0x11a0; call 0x11e0; mov byte ptr [rip + 0x3e65], 1; pop rbp; ret; 
0x00000000000015e1: mov rdi, rax; call 0x1070; leave; ret; 
0x000000000000139a: mov rdi, rax; call 0x1335; nop; leave; ret; 
0x0000000000001497: mov rdi, rax; call 0x13ef; nop; leave; ret; 
0x0000000000001baf: mov rdi, rax; call 0x1b1f; nop; leave; ret; 
0x00000000000012dd: mov rdi, rax; mov eax, 0; call 0x1140; mov eax, 0; leave; ret; 
0x0000000000001ed7: mov rdi, rdx; call rcx; 
0x0000000000001f1c: mov rdi, rdx; call rcx; 
0x0000000000001f1c: mov rdi, rdx; call rcx; leave; ret; 
0x0000000000001d65: mov rdx, qword ptr [rax + 0x38]; mov rax, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001ecc: mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f11: mov rdx, qword ptr [rbp - 8]; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001ed4: mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f19: mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f19: mov rsi, rax; mov rdi, rdx; call rcx; leave; ret; 
0x0000000000001bac: mov rsi, rcx; mov rdi, rax; call 0x1b1f; nop; leave; ret; 
0x0000000000001494: mov rsi, rdx; mov rdi, rax; call 0x13ef; nop; leave; ret; 
0x0000000000001b63: movzx eax, byte ptr [rax]; test al, al; jne 0x1b31; nop; pop rbp; ret; 
0x0000000000001243: nop dword ptr [rax + rax]; ret; 
0x0000000000001201: nop dword ptr [rax]; ret; 
0x0000000000001285: nop dword ptr [rax]; ret; 
0x0000000000001242: nop word ptr [rax + rax]; ret; 
0x0000000000001332: nop; leave; ret; 
0x0000000000001368: nop; leave; ret; 
0x00000000000013a2: nop; leave; ret; 
0x00000000000013ec: nop; leave; ret; 
0x000000000000145a: nop; leave; ret; 
0x000000000000149f: nop; leave; ret; 
0x0000000000001bb7: nop; leave; ret; 
0x0000000000001d24: nop; leave; ret; 
0x0000000000001e48: nop; leave; ret; 
0x00000000000022f0: nop; leave; ret; 
0x0000000000001367: nop; nop; leave; ret; 
0x00000000000016dd: nop; pop rbp; ret; 
0x0000000000001b6a: nop; pop rbp; ret; 
0x0000000000001d70: nop; pop rbp; ret; 
0x0000000000001dbf: nop; pop rbp; ret; 
0x0000000000001327: or bh, byte ptr [rdi + 0x3e8]; call 0x1190; nop; leave; ret; 
0x00000000000022e5: or bh, byte ptr [rdi]; call 0x1160; nop; leave; ret; 
0x0000000000001003: or byte ptr [rax - 0x75], cl; add eax, 0x3fc5; test rax, rax; je 0x1012; call rax; 
0x0000000000001db7: pop rax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000001283: pop rbp; ret; 
0x00000000000016de: pop rbp; ret; 
0x0000000000001b6b: pop rbp; ret; 
0x0000000000001d71: pop rbp; ret; 
0x0000000000001dc0: pop rbp; ret; 
0x0000000000001237: popfq; cmp eax, 0x85480000; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000001bb3: push -0x6f000001; leave; ret; 
0x0000000000001d67: push rax; cmp byte ptr [rax - 0x75], cl; call 0xffffffff9010a6b9; pop rbp; ret; 
0x0000000000001ece: push rbp; clc; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001f13: push rbp; clc; mov rcx, qword ptr [rbp - 0x18]; mov rsi, rax; mov rdi, rdx; call rcx; 
0x0000000000001d96: push rsi; xor eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x0000000000001daa: ret 0x1274; 
0x00000000000020ef: ret 0x12; 
0x000000000000190d: ret 0x1572; 
0x0000000000001e87: ret 0x1b73; 
0x00000000000018bd: ret 0x1e74; 
0x00000000000018f2: ret 0x3072; 
0x0000000000001d42: ret 0x33; 
0x0000000000001042: ret 0x3f; 
0x00000000000019e3: ret 0x458b; 
0x00000000000021f5: ret 0x4840; 
0x00000000000015bf: ret 0x8b48; 
0x0000000000001d9c: ret 0x8b48; 
0x00000000000019b9: ret 0x8d06; 
0x00000000000019ee: ret 0x8d48; 
0x0000000000001016: ret; 
0x0000000000001208: ret; 
0x0000000000001248: ret; 
0x0000000000001284: ret; 
0x0000000000001288: ret; 
0x00000000000012f0: ret; 
0x0000000000001334: ret; 
0x000000000000136a: ret; 
0x00000000000013a4: ret; 
0x00000000000013ee: ret; 
0x000000000000145c: ret; 
0x00000000000014a1: ret; 
0x00000000000015ea: ret; 
0x00000000000016a7: ret; 
0x00000000000016df: ret; 
0x0000000000001a2d: ret; 
0x0000000000001b19: ret; 
0x0000000000001b1e: ret; 
0x0000000000001b6c: ret; 
0x0000000000001bb9: ret; 
0x0000000000001d26: ret; 
0x0000000000001d72: ret; 
0x0000000000001dc1: ret; 
0x0000000000001e4a: ret; 
0x0000000000001f22: ret; 
0x00000000000022f2: ret; 
0x0000000000002389: ret; 
0x0000000000002394: ret; 
0x00000000000013eb: retf; nop; leave; ret; 
0x00000000000015dc: ror byte ptr [rax - 0x75], cl; clc; mov rdi, rax; call 0x1070; leave; ret; 
0x0000000000001f20: ror ecx, 1; ret; 
0x000000000000123d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000001457: sal byte ptr [rbp - 0x1b], 0x90; leave; ret; 
0x0000000000001364: sal byte ptr [rbp - 0x24], 0x90; nop; leave; ret; 
0x00000000000013e9: sal byte ptr [rbp - 0x35], 0x90; leave; ret; 
0x0000000000001b67: sal byte ptr [rbp - 0x39], 0x90; pop rbp; ret; 
0x00000000000011fc: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000100d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000001230: sar esi, 1; je 0x1248; mov rax, qword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x000000000000122f: sar rsi, 1; je 0x1248; mov rax, qword ptr [rip + 0x3d9d]; test rax, rax; je 0x1248; jmp rax; 
0x000000000000238d: sub esp, 8; add rsp, 8; ret; 
0x0000000000001001: sub esp, 8; mov rax, qword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; 
0x000000000000238c: sub rsp, 8; add rsp, 8; ret; 
0x0000000000001000: sub rsp, 8; mov rax, qword ptr [rip + 0x3fc5]; test rax, rax; je 0x1012; call rax; 
0x0000000000001363: test al, al; jne 0x1343; nop; nop; leave; ret; 
0x0000000000001b66: test al, al; jne 0x1b31; nop; pop rbp; ret; 
0x000000000000100c: test eax, eax; je 0x1012; call rax; 
0x000000000000100c: test eax, eax; je 0x1012; call rax; add rsp, 8; ret; 
0x00000000000011fb: test eax, eax; je 0x1208; jmp rax; 
0x000000000000123c: test eax, eax; je 0x1248; jmp rax; 
0x00000000000013e8: test eax, eax; jne 0x13b7; nop; leave; ret; 
0x0000000000001456: test eax, eax; jne 0x143f; nop; leave; ret; 
0x000000000000100b: test rax, rax; je 0x1012; call rax; 
0x000000000000100b: test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x00000000000011fa: test rax, rax; je 0x1208; jmp rax; 
0x000000000000123b: test rax, rax; je 0x1248; jmp rax; 
0x00000000000013e7: test rax, rax; jne 0x13b7; nop; leave; ret; 
0x0000000000001455: test rax, rax; jne 0x143f; nop; leave; ret; 
0x0000000000001ed9: xlatb; call rcx; 
0x0000000000001f1e: xlatb; call rcx; 
0x0000000000001f1e: xlatb; call rcx; leave; ret; 
0x0000000000001d97: xor eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8b48; 

322 gadgets found
